name: Build and Release Firmware

'on':
  push:
    tags:
      - '*'
    branches:
      - main
      - uniui
  workflow_dispatch: null

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Extract branch or tag version
        id: version
        env:
          PRERELEASE_BRANCHES: "uniui,dev,feature"
        run: |
          TIMESTAMP=$(date +'%d%m%y-%H%M')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
          VERSION="${GITHUB_REF_NAME}"
          # Determine prerelease status based on tag format "vX.Y.Z-<alpha|beta>"
          if [[ "$VERSION" =~ v[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta) ]]; then
           echo "prerelease=true" >> $GITHUB_ENV
           echo "release_name=${VERSION} - ${TIMESTAMP}" >> $GITHUB_ENV
          else
           echo "prerelease=false" >> $GITHUB_ENV
           echo "release_name=Release ${VERSION}" >> $GITHUB_ENV
          fi
          echo "draft=false" >> $GITHUB_ENV
          else
          VERSION="${GITHUB_REF_NAME:-main}"
          IFS=',' read -ra BRANCHES <<< "${PRERELEASE_BRANCHES}"
          PRERELEASE=false
          DRAFT=true
          for branch in "${BRANCHES[@]}"; do
           if [ "${GITHUB_REF_NAME}" = "$branch" ]; then
             PRERELEASE=true
             DRAFT=false
             break
           fi
          done
          echo "prerelease=$PRERELEASE" >> $GITHUB_ENV
          echo "draft=$DRAFT" >> $GITHUB_ENV
          if [ "$PRERELEASE" = "true" ]; then
           echo "release_name=${GITHUB_REF_NAME} - ${TIMESTAMP}" >> $GITHUB_ENV
          else
           echo "release_name=Release ${VERSION}" >> $GITHUB_ENV
          fi
          fi
          echo "version=$VERSION" >> $GITHUB_ENV


#      - name: Set up Python     #ATM not needed, but might be useful in the future
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.x'
#
#      - name: Install Python dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt

      - name: Build firmware using Docker
        run: |
          docker run --rm -v $(pwd):/workspace -w /workspace touwidev/gcc-arm-none-eabi:latest /bin/bash -c "\
            apt-get update -qq && \
            apt-get -qq install -y python3-venv && \
            python3 -m venv venv && \
            source venv/bin/activate && \
            pip install crcmod && \
            make all"

      - name: Rename Firmware
        run: |
          sudo mv bin/firmware.packed.bin bin/firmware.${GITHUB_REF_NAME}.${TIMESTAMP}.bin
        env:
          TIMESTAMP: ${{ env.TIMESTAMP }}

      - name: Create a GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: '${{ env.version }}'
          name: '${{ env.release_name }}'
          draft: '${{ env.draft }}'
          prerelease: '${{ env.prerelease }}'
          files: |
            bin/firmware.${{ env.version }}.${{ env.TIMESTAMP }}.bin
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          TIMESTAMP: ${{ env.TIMESTAMP }}
