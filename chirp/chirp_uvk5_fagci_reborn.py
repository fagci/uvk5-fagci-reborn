# Quansheng UV-K5 driver (c) 2024 Giorgio (IU0QWJ) for the Fagci R3b0rn firmware
#
# based on template.py Copyright 2012 Dan Smith <dsmith@danplanet.com>
# based on Copyright 2023 Jacek Lipkowski <sq5bpf@lipkowski.org>
#
# This is a preliminary version of a driver for the UV-K5
# It is based on my reverse engineering effort described here:
# https://github.com/sq5bpf/uvk5-reverse-engineering
#
# Warning: this driver is experimental, it may brick your radio,
# eat your lunch and mess up your configuration.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Made From Giorgio (IU0QWJ) for the Fagci R3b0rn firmware
# https://github.com/gpillon
# https://github.com/fagci/uvk5-fagci-reborn
#
# Many Thanks to:
# - IJV
# - Julian Lilov (LZ1JDL)
# - Francesco IK8JHL,
# for their work :)
# and...THANKS FAGCI FOR THE FIRMWARE!


# Known Bugs (Fixes Needed - Help is Appreciated)
# - Custom mode names differ from those on the radio (might require a pull request to CHIRP)

import math

import struct
import logging
import re
import wx

# noinspection PyUnresolvedReferences
from chirp import chirp_common, directory, bitwise, memmap, errors, util
# noinspection PyUnresolvedReferences
from chirp.settings import RadioSetting, RadioSettingGroup, \
    RadioSettingValueBoolean, RadioSettingValueList, \
    RadioSettingValueInteger, RadioSettingValueString, \
    RadioSettings, RadioSettingSubGroup

LOG = logging.getLogger(__name__)

# Define the allowed characters
ALLOWED_CHARS = ''.join(chirp_common.CHARSET_ASCII)

# Create a regex pattern to match any character not in the allowed list
ALLOWED_CHARS_PATTERN = f'[^{re.escape(ALLOWED_CHARS)}]'

# Show the obfuscated version of commands. Not needed normally, but
# might be useful for someone who is debugging a similar radio
DEBUG_SHOW_OBFUSCATED_COMMANDS = True

# Show the memory being written/received. Not needed normally, because
# this is the same information as in the packet hexdumps, but
# might be useful for someone debugging some obscure memory issue
DEBUG_SHOW_MEMORY_ACTIONS = True

MEM_BLOCK = 0x80  # largest block of memory that we can reliably write

OFFSET_SIZE = 0  # size of the offset in the memory map

RAW_PATCH_DATA = [
    0x15, 0x00, 0x03, 0x74, 0x0b, 0xd4, 0x84, 0x60,
    0x16, 0x6f, 0xae, 0x6c, 0xf9, 0xbb, 0x84, 0xa2,
    0x16, 0x65, 0xb1, 0x4b, 0xf6, 0x72, 0x01, 0x1a,
    0x16, 0x21, 0xe8, 0x5a, 0xd8, 0xd6, 0x04, 0x73,
    0x16, 0x5e, 0x2c, 0x22, 0x6e, 0xc4, 0xe9, 0xb5,
    0x16, 0x8b, 0x81, 0x9a, 0x1e, 0xe4, 0x87, 0xc9,
    0x16, 0x9e, 0x7b, 0x17, 0x52, 0x6d, 0xad, 0xe3,
    0x16, 0xe5, 0x8b, 0x04, 0xa7, 0x2e, 0x99, 0x6a,
    0x16, 0x32, 0xaa, 0x99, 0x97, 0xcc, 0xa6, 0x5b,
    0x16, 0x15, 0x79, 0x56, 0x48, 0x01, 0x63, 0xb1,
    0x16, 0xdf, 0x54, 0x27, 0x06, 0x57, 0x06, 0x53,
    0x16, 0x8c, 0xa6, 0x27, 0xaa, 0x66, 0x89, 0x03,
    0x16, 0x18, 0x51, 0x7e, 0xfb, 0x67, 0xd3, 0xce,
    0x16, 0xdd, 0x3f, 0xfd, 0x3d, 0x1f, 0x47, 0x84,
    0x16, 0x01, 0xf3, 0x85, 0x6e, 0xf8, 0x3b, 0x79,
    0x16, 0x2b, 0x0c, 0x90, 0x4b, 0x67, 0x46, 0x7d,
    0x16, 0x54, 0x88, 0xfd, 0xd6, 0x12, 0xe5, 0xe7,
    0x16, 0x48, 0xf2, 0x0e, 0xdb, 0x99, 0x4d, 0x71,
    0x16, 0xa5, 0x40, 0x68, 0xd9, 0xc9, 0x59, 0x39,
    0x16, 0xe4, 0x75, 0x20, 0x1c, 0xe9, 0xb1, 0xf5,
    0x16, 0x01, 0x3c, 0x19, 0xbb, 0x60, 0xf7, 0xfa,
    0x16, 0x6b, 0x1e, 0x68, 0x9f, 0x19, 0xb6, 0xed,
    0x16, 0x14, 0x0f, 0x56, 0xbc, 0xc1, 0x34, 0xcb,
    0x16, 0x00, 0x9d, 0x43, 0xd4, 0x0f, 0xf3, 0x62,
    0x16, 0x9c, 0x9d, 0xf7, 0x8b, 0x9d, 0x53, 0x3a,
    0x16, 0x8d, 0x2f, 0x3d, 0xde, 0x3d, 0x38, 0x31,
    0x16, 0x03, 0x9b, 0xc7, 0xc1, 0x59, 0xe9, 0xd1,
    0x16, 0x75, 0x88, 0x8d, 0x36, 0x58, 0x86, 0x70,
    0x16, 0x4e, 0x5b, 0x9e, 0xd0, 0xdb, 0xcb, 0xf7,
    0x16, 0xea, 0x1f, 0xdb, 0xa5, 0x3b, 0xb3, 0xbd,
    0x16, 0x6b, 0xbc, 0xf3, 0x70, 0x65, 0xd5, 0x17,
    0x16, 0x0f, 0x64, 0x15, 0x24, 0x20, 0xd5, 0xb8,
    0x16, 0x7b, 0x0d, 0x27, 0x29, 0x85, 0x88, 0x1f,
    0x16, 0x58, 0x22, 0x57, 0x4f, 0x09, 0xc0, 0x4d,
    0x16, 0xd6, 0xe4, 0xc6, 0xb5, 0x3a, 0x37, 0x33,
    0x16, 0x27, 0xbb, 0x6a, 0x14, 0x69, 0x03, 0x1b,
    0x16, 0xed, 0xa8, 0xc3, 0x43, 0xe8, 0xea, 0xde,
    0x16, 0x41, 0x06, 0x25, 0xc5, 0xc8, 0x3c, 0xbf,
    0x16, 0x32, 0xb2, 0xa7, 0xdd, 0x22, 0xc2, 0xe9,
    0x16, 0xca, 0x84, 0xf2, 0xc0, 0x26, 0x7c, 0x78,
    0x16, 0x01, 0xf7, 0xd5, 0xc6, 0x05, 0x33, 0xe4,
    0x16, 0xc2, 0x78, 0xec, 0x1b, 0xfd, 0xd2, 0x50,
    0x16, 0x7d, 0x11, 0x29, 0x57, 0x99, 0xb0, 0xf1,
    0x16, 0x55, 0x66, 0x74, 0xb4, 0x58, 0x23, 0xa0,
    0x16, 0x6f, 0x2e, 0xd8, 0x9b, 0x08, 0xb3, 0x3e,
    0x16, 0x53, 0xcf, 0x5e, 0xcc, 0x7a, 0xdf, 0x4e,
    0x16, 0xed, 0x42, 0x16, 0x6a, 0x91, 0x88, 0x43,
    0x16, 0x1b, 0x1d, 0x84, 0x5c, 0x52, 0x21, 0x66,
    0x16, 0x58, 0x24, 0x36, 0x71, 0xc5, 0x6a, 0x0d,
    0x16, 0x2c, 0x86, 0x9a, 0x23, 0x9d, 0xe0, 0x35,
    0x16, 0x43, 0xc9, 0x7f, 0x41, 0xbd, 0x82, 0x99,
    0x16, 0xed, 0x7a, 0x26, 0xb2, 0xd3, 0xa6, 0xce,
    0x16, 0x4f, 0x00, 0xe6, 0x87, 0xe3, 0xd7, 0x68,
    0x16, 0x28, 0x86, 0xf7, 0xce, 0xd2, 0xb3, 0xd3,
    0x16, 0x1b, 0x04, 0x02, 0xb9, 0x78, 0xb3, 0xad,
    0x16, 0xe0, 0x3c, 0x53, 0xa6, 0x8a, 0x4a, 0x22,
    0x16, 0xbe, 0x1f, 0xce, 0xb1, 0x76, 0xf2, 0x2f,
    0x16, 0x81, 0xa8, 0xc1, 0x78, 0x72, 0xb0, 0x15,
    0x16, 0x65, 0x19, 0xe3, 0x32, 0xa7, 0x4d, 0x0c,
    0x16, 0xd3, 0x00, 0xb9, 0xc3, 0x27, 0xbe, 0x74,
    0x16, 0x4d, 0xd1, 0xe1, 0x0c, 0x36, 0xdd, 0x23,
    0x16, 0xfb, 0xa7, 0x22, 0xd3, 0x44, 0xca, 0xb3,
    0x16, 0x08, 0x1b, 0xb4, 0x0d, 0x4b, 0xdf, 0x1a,
    0x16, 0xa6, 0x90, 0x32, 0x92, 0x5c, 0x1a, 0xa7,
    0x16, 0xcd, 0x85, 0x2e, 0x35, 0x11, 0x72, 0xf8,
    0x16, 0x21, 0x35, 0x7d, 0x3f, 0xdb, 0x29, 0x8d,
    0x16, 0x30, 0xb3, 0x4f, 0x45, 0x14, 0x77, 0xcf,
    0x16, 0x99, 0x2f, 0xa3, 0x90, 0x81, 0xb0, 0xae,
    0x16, 0xe8, 0x45, 0xe6, 0x3a, 0xa9, 0xa2, 0x62,
    0x16, 0xb7, 0xdb, 0xbe, 0x25, 0x39, 0xa5, 0xfc,
    0x16, 0xea, 0xc5, 0xbc, 0x3a, 0xec, 0x90, 0xae,
    0x16, 0xa6, 0xfb, 0x12, 0xaa, 0xc7, 0x62, 0x22,
    0x16, 0xaf, 0xa9, 0x84, 0xb9, 0x64, 0xb8, 0xfb,
    0x16, 0x8d, 0xc1, 0x1c, 0xc3, 0xd0, 0x87, 0x6d,
    0x16, 0x5c, 0xb4, 0xfe, 0x3f, 0xa4, 0xb8, 0xd8,
    0x16, 0x89, 0xf4, 0x01, 0x59, 0xbb, 0x04, 0xa5,
    0x16, 0x43, 0x44, 0x1a, 0xcb, 0x41, 0x30, 0xf7,
    0x16, 0x5b, 0x9a, 0xee, 0x28, 0xf4, 0x4c, 0x71,
    0x16, 0x99, 0xca, 0x4b, 0x7f, 0x2a, 0x13, 0xf0,
    0x16, 0x4b, 0x54, 0xb3, 0xfc, 0x90, 0xed, 0xbe,
    0x16, 0x48, 0x3f, 0xf1, 0x5e, 0x0d, 0xa1, 0xbb,
    0x16, 0x1e, 0x59, 0x16, 0x15, 0xf0, 0x4b, 0x50,
    0x16, 0x4c, 0x96, 0x86, 0x1b, 0xa9, 0xcc, 0xc2,
    0x16, 0x69, 0x4e, 0x10, 0x03, 0xf0, 0xe9, 0x53,
    0x16, 0xe5, 0xe2, 0xbb, 0x45, 0xe2, 0x8d, 0xae,
    0x16, 0x40, 0x71, 0x08, 0x86, 0x4d, 0x08, 0xf4,
    0x16, 0x96, 0x90, 0x58, 0x53, 0x40, 0xa5, 0x8b,
    0x16, 0x5b, 0x3c, 0xad, 0x47, 0xb5, 0xd7, 0xe2,
    0x16, 0x6a, 0x13, 0x78, 0xd4, 0xdc, 0xc9, 0xec,
    0x16, 0x0e, 0x93, 0xf0, 0xc0, 0x1d, 0x95, 0x36,
    0x16, 0x76, 0xa4, 0x53, 0x85, 0xc9, 0xac, 0xe4,
    0x16, 0x71, 0x8d, 0xaf, 0x68, 0x61, 0x20, 0x9d,
    0x16, 0xff, 0x45, 0x35, 0x6e, 0x04, 0xd8, 0x27,
    0x16, 0x32, 0xc3, 0xda, 0xee, 0xa2, 0x66, 0x04,
    0x16, 0xb7, 0x21, 0x06, 0x52, 0x7f, 0x39, 0x8f,
    0x16, 0xfd, 0xee, 0x90, 0x74, 0xb6, 0x4f, 0xb6,
    0x16, 0x24, 0x0e, 0x12, 0x48, 0xf0, 0xb2, 0x30,
    0x16, 0xf2, 0xa5, 0x4c, 0x91, 0x52, 0xe3, 0xc6,
    0x16, 0x48, 0x7b, 0x38, 0x96, 0x23, 0x9e, 0xd7,
    0x16, 0x1b, 0x95, 0x15, 0x3a, 0xc9, 0x8b, 0x6f,
    0x16, 0x63, 0x7d, 0x1d, 0xc9, 0xea, 0x96, 0xe6,
    0x16, 0x01, 0xd7, 0x85, 0xc0, 0xea, 0x3d, 0xca,
    0x16, 0xd3, 0xb7, 0xfb, 0x07, 0x54, 0x3a, 0x00,
    0x16, 0x31, 0x3d, 0x74, 0xe4, 0x12, 0x5b, 0xa2,
    0x16, 0x38, 0x33, 0x5b, 0xbf, 0x1d, 0xdc, 0x4e,
    0x16, 0xe8, 0x85, 0x10, 0x77, 0xab, 0xea, 0x65,
    0x16, 0x79, 0xb0, 0xaa, 0x30, 0x61, 0xc6, 0xf6,
    0x16, 0x3b, 0xcc, 0x95, 0xfc, 0x83, 0x7f, 0x8c,
    0x16, 0x7b, 0xb5, 0x52, 0x05, 0xeb, 0xf7, 0x21,
    0x16, 0xde, 0x89, 0xb6, 0x6d, 0xee, 0x31, 0x77,
    0x16, 0x13, 0xaa, 0x93, 0x55, 0x96, 0x08, 0x6e,
    0x16, 0x1c, 0x82, 0xb5, 0x7e, 0x95, 0xb9, 0x94,
    0x16, 0xdd, 0x68, 0x42, 0x5c, 0x3a, 0x00, 0xc3,
    0x16, 0x7b, 0x6f, 0x60, 0x6a, 0x2c, 0x07, 0xd7,
    0x16, 0x6c, 0x82, 0xfb, 0xb2, 0x81, 0x25, 0x69,
    0x16, 0xd6, 0x72, 0x0a, 0xd2, 0xe8, 0x50, 0x05,
    0x16, 0x88, 0x49, 0x1b, 0x63, 0x72, 0x99, 0x6c,
    0x16, 0xe3, 0x7a, 0xae, 0xb0, 0x1b, 0x9e, 0xd4,
    0x16, 0x25, 0x54, 0x25, 0x8a, 0x90, 0x17, 0x97,
    0x16, 0xdf, 0x39, 0xb8, 0x7c, 0xea, 0xf0, 0x82,
    0x16, 0xdd, 0x25, 0xd2, 0xad, 0xe7, 0xf6, 0x36,
    0x16, 0x23, 0x84, 0xa9, 0xc9, 0x6a, 0x53, 0xf4,
    0x16, 0x82, 0x2c, 0x1d, 0xea, 0x06, 0xc6, 0x4f,
    0x16, 0x70, 0x54, 0x37, 0x80, 0x2a, 0x6b, 0x63,
    0x16, 0xdb, 0xcc, 0x86, 0xe6, 0x8c, 0x7f, 0x27,
    0x16, 0x8c, 0x72, 0x54, 0x73, 0x9e, 0x1b, 0xd6,
    0x16, 0x4c, 0xfa, 0x05, 0x82, 0x80, 0xd7, 0xb7,
    0x16, 0x11, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x06, 0x98, 0x69, 0x15, 0x1c, 0xfc,
    0x16, 0x86, 0x87, 0x74, 0x84, 0x5b, 0xd4, 0x0f,
    0x16, 0xdb, 0xd7, 0x27, 0xc5, 0x4a, 0xb2, 0x8f,
    0x16, 0x29, 0x7a, 0x4a, 0x23, 0x0a, 0xb8, 0x07,
    0x16, 0xd0, 0x34, 0x70, 0x81, 0x8e, 0x53, 0xef,
    0x16, 0x43, 0x16, 0x3f, 0xa8, 0xa7, 0x9e, 0x5a,
    0x16, 0x77, 0xc0, 0x91, 0xb7, 0x89, 0x15, 0x52,
    0x16, 0x48, 0xc0, 0xb7, 0x62, 0xab, 0xe1, 0x74,
    0x16, 0x64, 0x10, 0xaa, 0x09, 0x6b, 0x97, 0x74,
    0x16, 0x21, 0x79, 0x35, 0xa1, 0x97, 0x25, 0xfc,
    0x16, 0x78, 0xc1, 0xec, 0x6e, 0x87, 0x77, 0x40,
    0x16, 0x87, 0x1a, 0x74, 0x82, 0x81, 0x56, 0xdd,
    0x16, 0xec, 0x37, 0xad, 0xaf, 0x03, 0x31, 0xac,
    0x16, 0x47, 0x85, 0x74, 0xc0, 0x2a, 0x45, 0x9d,
    0x16, 0xf4, 0x12, 0x0c, 0xf9, 0x86, 0xb0, 0x4a,
    0x16, 0x16, 0xd8, 0x11, 0x6c, 0x46, 0xc4, 0x4a,
    0x16, 0x67, 0x98, 0x8b, 0x1b, 0x42, 0xc2, 0xbe,
    0x16, 0xbb, 0x0e, 0x48, 0x84, 0xf7, 0x08, 0xa6,
    0x16, 0xc3, 0x8f, 0x8e, 0x8d, 0xab, 0xc2, 0x9b,
    0x16, 0x5d, 0x5c, 0x60, 0x28, 0x57, 0x8f, 0x0e,
    0x16, 0xad, 0x2e, 0xc1, 0x5e, 0x95, 0x29, 0x9a,
    0x16, 0xf4, 0x8a, 0x27, 0xd4, 0x41, 0xbb, 0x4a,
    0x16, 0xac, 0x5d, 0xb2, 0x93, 0x26, 0xfd, 0x87,
    0x16, 0x81, 0x3f, 0x27, 0x35, 0xa6, 0x42, 0x2c,
    0x16, 0x15, 0x38, 0xad, 0xf8, 0x02, 0x6f, 0x94,
    0x16, 0xda, 0x08, 0xee, 0x19, 0xd8, 0x90, 0xfa,
    0x16, 0x89, 0xc3, 0xad, 0x89, 0xfe, 0xc6, 0x02,
    0x16, 0x46, 0x81, 0x1d, 0x0c, 0x8d, 0x78, 0x2f,
    0x16, 0xee, 0xd3, 0xed, 0x6c, 0x7b, 0x95, 0x49,
    0x16, 0x56, 0x87, 0xf4, 0xe2, 0x63, 0xda, 0x39,
    0x16, 0xce, 0x68, 0x16, 0x18, 0xed, 0x98, 0xee,
    0x16, 0x86, 0xf3, 0xb3, 0xc1, 0x12, 0x1a, 0x51,
    0x16, 0x9b, 0x57, 0x1d, 0x19, 0x9e, 0x98, 0x7e,
    0x16, 0xd2, 0xfd, 0x3d, 0x2b, 0x59, 0x15, 0x46,
    0x16, 0x74, 0x57, 0x79, 0x14, 0x81, 0x71, 0x89,
    0x16, 0xd9, 0x22, 0xdd, 0x92, 0x10, 0xd9, 0x89,
    0x16, 0x91, 0xdf, 0x67, 0x00, 0x6e, 0x53, 0xaf,
    0x16, 0xda, 0xb5, 0x28, 0x30, 0x1e, 0x47, 0xe6,
    0x16, 0xb7, 0x05, 0x2d, 0x22, 0xcf, 0x7f, 0x6a,
    0x16, 0xcd, 0x88, 0x90, 0x6b, 0x8c, 0x16, 0x36,
    0x16, 0x88, 0x07, 0xa1, 0xb7, 0xaf, 0xf3, 0x31,
    0x16, 0xc4, 0xdb, 0x76, 0x8b, 0x96, 0x9e, 0xf0,
    0x16, 0x17, 0xa7, 0x3f, 0x84, 0x78, 0x91, 0xa8,
    0x16, 0xcd, 0x3f, 0x8f, 0xa5, 0xdd, 0x52, 0x14,
    0x16, 0xf9, 0x39, 0x5d, 0x0b, 0x56, 0x8e, 0x1c,
    0x16, 0x5a, 0x5b, 0x89, 0xee, 0x80, 0x9e, 0x33,
    0x16, 0xbd, 0xb1, 0x45, 0x15, 0x42, 0x34, 0x59,
    0x16, 0x78, 0x20, 0xfc, 0x2d, 0xdb, 0xc9, 0x2e,
    0x16, 0x0f, 0x35, 0x26, 0xcf, 0x23, 0x9b, 0x3e,
    0x16, 0x1d, 0x9f, 0x0f, 0x26, 0x0e, 0xb7, 0xb5,
    0x16, 0x4e, 0xac, 0xa2, 0x86, 0xd5, 0xda, 0x36,
    0x16, 0x04, 0x5a, 0x73, 0x46, 0x6a, 0x88, 0xc5,
    0x16, 0x2a, 0xa0, 0x83, 0xe8, 0x8b, 0x5f, 0x3c,
    0x16, 0xaf, 0x6a, 0x44, 0x4e, 0x75, 0x9b, 0x8f,
    0x16, 0x93, 0x37, 0x35, 0x38, 0xbd, 0x02, 0x9a,
    0x16, 0x1d, 0x84, 0x29, 0x64, 0x25, 0x97, 0xe0,
    0x16, 0x7c, 0x2a, 0xb6, 0xcb, 0xc1, 0x66, 0x51,
    0x16, 0x3c, 0xbc, 0x3b, 0xf3, 0x55, 0x2b, 0xb7,
    0x16, 0xbd, 0x81, 0xec, 0xf3, 0x49, 0xd5, 0xf8,
    0x16, 0x03, 0xe0, 0xbd, 0xc6, 0x0c, 0xee, 0xc0,
    0x16, 0x19, 0x08, 0xfb, 0x4f, 0x8c, 0x94, 0x08,
    0x16, 0x0e, 0xa5, 0x30, 0x37, 0xf0, 0xb8, 0x18,
    0x16, 0x93, 0x73, 0x00, 0xbb, 0x52, 0x52, 0xb4,
    0x16, 0x98, 0x0d, 0x4b, 0x45, 0xb9, 0x89, 0x0a,
    0x16, 0x34, 0xe9, 0x1c, 0x24, 0x5a, 0x8f, 0xa8,
    0x16, 0x9d, 0xc2, 0xd9, 0x27, 0xa9, 0xee, 0xbf,
    0x16, 0xc0, 0x80, 0x90, 0xbc, 0x2a, 0x93, 0x43,
    0x16, 0xfb, 0x0a, 0xb3, 0x96, 0xd1, 0xae, 0x13,
    0x16, 0x41, 0x01, 0x68, 0xb9, 0x2c, 0x53, 0x53,
    0x16, 0x7c, 0x00, 0xa5, 0x84, 0x41, 0xd6, 0x98,
    0x16, 0x88, 0x98, 0xfe, 0xde, 0xf7, 0xe2, 0x37,
    0x16, 0x43, 0x62, 0x0e, 0x93, 0x83, 0xee, 0x03,
    0x16, 0x0a, 0x8d, 0xca, 0x87, 0x59, 0x36, 0x6f,
    0x16, 0x61, 0xf7, 0xf4, 0xd6, 0xab, 0x8b, 0x0f,
    0x16, 0x9c, 0x83, 0x96, 0xa4, 0x6c, 0x46, 0x43,
    0x16, 0x80, 0x6b, 0xea, 0x50, 0xdc, 0xd8, 0xce,
    0x16, 0xd4, 0xf4, 0xae, 0x5b, 0xc6, 0x01, 0x43,
    0x16, 0x85, 0x71, 0x8d, 0x0c, 0x39, 0x5e, 0xe4,
    0x16, 0x3b, 0x2b, 0xc4, 0x88, 0xb2, 0xc5, 0x54,
    0x16, 0x96, 0x0e, 0x87, 0x9a, 0x50, 0x93, 0xd6,
    0x16, 0x9c, 0x91, 0xca, 0x09, 0x64, 0x8b, 0x23,
    0x16, 0xc4, 0x29, 0x44, 0x1a, 0x67, 0xe1, 0xda,
    0x16, 0xc7, 0x1b, 0x25, 0x17, 0x02, 0x2c, 0x8f,
    0x16, 0x2a, 0x13, 0x3a, 0xcf, 0xd6, 0x65, 0x31,
    0x16, 0x2b, 0x10, 0xf5, 0xb5, 0x96, 0xdf, 0x01,
    0x16, 0x99, 0x7b, 0xad, 0xd6, 0xb4, 0xc0, 0x35,
    0x16, 0xa3, 0x48, 0xe3, 0xb0, 0x9e, 0xfe, 0x33,
    0x16, 0x10, 0x1a, 0x09, 0xae, 0x3c, 0x0a, 0xa1,
    0x16, 0x72, 0x8f, 0x00, 0x51, 0xe1, 0x78, 0x23,
    0x16, 0xf5, 0xe2, 0xbf, 0xa6, 0x46, 0x28, 0xb3,
    0x16, 0x4b, 0x24, 0xb1, 0xa1, 0xde, 0xb1, 0xc4,
    0x16, 0x48, 0x6f, 0xed, 0x5a, 0xd4, 0x61, 0xf0,
    0x16, 0xdb, 0xe1, 0x08, 0x5c, 0x64, 0xc0, 0xca,
    0x16, 0xe9, 0xa9, 0xde, 0xde, 0xec, 0xc0, 0x68,
    0x16, 0x5b, 0x6d, 0xbd, 0x43, 0x82, 0x8c, 0xca,
    0x16, 0x69, 0xb1, 0xa9, 0xc8, 0x71, 0x0d, 0x5d,
    0x16, 0x6d, 0xa5, 0xab, 0x1a, 0x67, 0x94, 0xee,
    0x16, 0x05, 0x93, 0xe3, 0x3f, 0xe8, 0x1a, 0xe6,
    0x16, 0x0f, 0x7f, 0x79, 0xf2, 0xcb, 0xc5, 0x37,
    0x16, 0x57, 0xdf, 0xfc, 0x4f, 0xb4, 0x60, 0xc7,
    0x16, 0x97, 0x3c, 0x61, 0xb0, 0x0c, 0x46, 0x64,
    0x16, 0xf4, 0x43, 0x92, 0xd2, 0xa5, 0xf0, 0xf3,
    0x16, 0xb7, 0xdf, 0xab, 0x20, 0xb1, 0xf5, 0x30,
    0x16, 0x2a, 0xb3, 0xdc, 0x4b, 0x39, 0xb7, 0x85,
    0x16, 0x3e, 0x1e, 0x1b, 0x94, 0x8c, 0x26, 0x28,
    0x16, 0x80, 0x45, 0xd6, 0x01, 0x36, 0xd0, 0xec,
    0x16, 0x93, 0x46, 0x88, 0xd3, 0xd5, 0x89, 0x5d,
    0x16, 0x7a, 0x82, 0x21, 0x3e, 0xc2, 0x40, 0xe3,
    0x16, 0xb4, 0xde, 0xf5, 0xa5, 0x69, 0xd5, 0x69,
    0x16, 0x49, 0x5c, 0x89, 0xcd, 0xae, 0x13, 0x70,
    0x16, 0x70, 0xed, 0x69, 0x0c, 0xec, 0xc6, 0xfe,
    0x16, 0x75, 0xeb, 0x4e, 0xd6, 0xb3, 0xc8, 0x60,
    0x16, 0xfb, 0x34, 0x1e, 0xf8, 0x64, 0x92, 0xd9,
    0x16, 0x29, 0xa8, 0x13, 0x38, 0x3d, 0x79, 0xc4,
    0x16, 0xbf, 0x21, 0x37, 0x9d, 0xe3, 0x4f, 0x21,
    0x16, 0xe5, 0x3f, 0x2c, 0x5c, 0x5f, 0x41, 0xff,
    0x16, 0x14, 0x87, 0x91, 0xe0, 0x82, 0x04, 0x0b,
    0x16, 0x1e, 0x55, 0x53, 0xdc, 0x56, 0x40, 0xa4,
    0x16, 0x35, 0x78, 0xe2, 0x9b, 0x49, 0x22, 0x2e,
    0x16, 0x09, 0xcd, 0x1f, 0x6f, 0x94, 0x83, 0xee,
    0x16, 0xea, 0x8b, 0xc4, 0xc2, 0x10, 0xe0, 0x80,
    0x16, 0xd9, 0xa5, 0x5f, 0x53, 0x34, 0x9c, 0x8c,
    0x16, 0xea, 0x95, 0x64, 0x87, 0x94, 0xd6, 0x32,
    0x16, 0x1c, 0xeb, 0x93, 0xbf, 0xe3, 0x55, 0x83,
    0x16, 0xc2, 0xf6, 0xfc, 0xc8, 0x85, 0xb2, 0x94,
    0x16, 0x5c, 0x42, 0x5f, 0x6b, 0x8e, 0x3b, 0x97,
    0x16, 0x79, 0x74, 0x7e, 0xe3, 0x5c, 0xc2, 0x63,
    0x16, 0x1a, 0x22, 0xb1, 0x7f, 0x94, 0xcb, 0xe7,
    0x16, 0xb7, 0xff, 0x0e, 0x37, 0x95, 0xaf, 0x10,
    0x16, 0x53, 0x17, 0x88, 0x12, 0x72, 0xdd, 0xcb,
    0x16, 0xab, 0x4b, 0x6b, 0x68, 0x24, 0xac, 0xc9,
    0x16, 0x5c, 0x72, 0x09, 0x4f, 0xf1, 0xfb, 0x1d,
    0x16, 0xe7, 0xa2, 0x30, 0xe9, 0x20, 0x4b, 0xda,
    0x16, 0x70, 0x7c, 0x9e, 0xe2, 0x34, 0xeb, 0x6a,
    0x16, 0x35, 0xc2, 0x33, 0xd7, 0x9d, 0x07, 0xb1,
    0x16, 0xef, 0xf6, 0x75, 0xf5, 0xfd, 0xad, 0xc7,
    0x16, 0x4b, 0xd0, 0xb7, 0xdd, 0xae, 0x1e, 0x8d,
    0x16, 0x1e, 0xc0, 0x39, 0x9c, 0xa7, 0x1c, 0xc5,
    0x16, 0xcc, 0x39, 0x50, 0xc6, 0x6b, 0xc6, 0xda,
    0x16, 0x37, 0xc7, 0xe1, 0x20, 0xeb, 0x74, 0xa5,
    0x16, 0x3d, 0xc0, 0x08, 0xfa, 0xc2, 0xdf, 0xf2,
    0x16, 0x9e, 0x43, 0x2b, 0xf0, 0x77, 0x50, 0x49,
    0x16, 0x8c, 0xc3, 0x2f, 0x68, 0xf3, 0x2a, 0x9b,
    0x16, 0x83, 0x1a, 0xdc, 0x05, 0xd8, 0xb7, 0x7c,
    0x16, 0x3c, 0x61, 0x11, 0x76, 0xec, 0x2d, 0xfe,
    0x16, 0x86, 0x08, 0x87, 0x15, 0xa3, 0xc0, 0x1c,
    0x16, 0xb4, 0x6a, 0x8d, 0x9e, 0xbf, 0x9a, 0xd5,
    0x16, 0xc8, 0x5b, 0x05, 0x18, 0x10, 0x15, 0xfb,
    0x16, 0xc6, 0x3c, 0xee, 0xc5, 0x52, 0x4b, 0x31,
    0x16, 0x36, 0x07, 0xb9, 0x4c, 0x81, 0xea, 0x83,
    0x16, 0xd7, 0x82, 0xfe, 0xfc, 0x43, 0x59, 0x4e,
    0x16, 0x20, 0xbd, 0xd3, 0x65, 0xcf, 0x1f, 0x5c,
    0x16, 0x71, 0x1f, 0xbf, 0x26, 0xec, 0x44, 0xeb,
    0x16, 0x01, 0x74, 0x82, 0x3c, 0x8e, 0x60, 0xdf,
    0x16, 0x47, 0x90, 0x31, 0x17, 0x7e, 0x16, 0xc0,
    0x16, 0xec, 0x1e, 0xc3, 0x3a, 0x7a, 0x59, 0x21,
    0x16, 0xa2, 0x9b, 0x8e, 0x87, 0x25, 0xd3, 0xfe,
    0x16, 0x85, 0xdd, 0x6d, 0xe6, 0xd8, 0xca, 0x74,
    0x16, 0xba, 0xdb, 0x42, 0x30, 0x96, 0x3d, 0x86,
    0x16, 0x22, 0x86, 0x6f, 0xde, 0x37, 0x1a, 0x93,
    0x16, 0x2f, 0x03, 0x2e, 0xe1, 0x6e, 0x16, 0x62,
    0x16, 0xc1, 0xe1, 0x2d, 0xfe, 0xcb, 0xa8, 0xdf,
    0x16, 0x64, 0x05, 0xef, 0x23, 0xbc, 0x71, 0x61,
    0x16, 0x7b, 0x1b, 0x60, 0x22, 0x27, 0xbd, 0xc6,
    0x16, 0xa3, 0x72, 0x07, 0xaa, 0x09, 0xb0, 0x52,
    0x16, 0xf2, 0x19, 0x15, 0x4d, 0xbe, 0xaf, 0x26,
    0x16, 0x3b, 0x4d, 0x62, 0xa6, 0x3c, 0x41, 0x07,
    0x16, 0x7a, 0x34, 0x25, 0x3c, 0xd6, 0xcd, 0xb6,
    0x16, 0x55, 0x47, 0x87, 0x1e, 0xcb, 0xcf, 0xce,
    0x16, 0xd2, 0x0d, 0x95, 0xc0, 0xd8, 0x72, 0xa6,
    0x16, 0xe0, 0x33, 0x24, 0x26, 0x51, 0x7e, 0x71,
    0x16, 0xc7, 0x53, 0x3f, 0xd4, 0x67, 0x73, 0x52,
    0x16, 0xcb, 0x78, 0x5a, 0x00, 0x11, 0x15, 0x71,
    0x16, 0x5f, 0x8d, 0x3c, 0xcf, 0x40, 0xcd, 0xd9,
    0x16, 0x74, 0x30, 0xd9, 0xa1, 0x3f, 0xc6, 0x58,
    0x16, 0xbc, 0xbe, 0x78, 0x18, 0x31, 0x9a, 0x39,
    0x16, 0x60, 0xbb, 0x8d, 0x7b, 0x34, 0x95, 0xa5,
    0x16, 0xf1, 0x54, 0x3b, 0xb9, 0x85, 0x99, 0xaf,
    0x16, 0xc4, 0x45, 0xeb, 0x64, 0xa7, 0x6e, 0x59,
    0x16, 0x60, 0xeb, 0x1e, 0x7a, 0xfb, 0xfd, 0x92,
    0x16, 0x43, 0x23, 0xf1, 0x27, 0xac, 0x66, 0x12,
    0x16, 0x66, 0x28, 0x8a, 0x5c, 0xf6, 0xc6, 0x3f,
    0x16, 0x76, 0x04, 0xe8, 0x09, 0x27, 0xed, 0x05,
    0x16, 0xaa, 0x26, 0xe5, 0xb4, 0xad, 0x40, 0xba,
    0x16, 0xf7, 0xf4, 0x84, 0xcb, 0x7f, 0x07, 0x10,
    0x16, 0x8d, 0xb6, 0xc7, 0xd4, 0x77, 0xea, 0xba,
    0x16, 0x96, 0x2a, 0x98, 0xf0, 0x56, 0xd7, 0xff,
    0x16, 0x50, 0x4d, 0x59, 0x79, 0x3d, 0x41, 0xe0,
    0x16, 0xfa, 0xa9, 0x9d, 0x3e, 0xa6, 0xd9, 0x79,
    0x16, 0xc8, 0x0d, 0xd1, 0x56, 0xc5, 0xad, 0xd7,
    0x16, 0xfb, 0x70, 0x3c, 0xbd, 0xf3, 0xe9, 0x5d,
    0x16, 0x1c, 0x53, 0x93, 0x33, 0x1d, 0xf8, 0x1b,
    0x16, 0xee, 0x9f, 0xb7, 0x50, 0xac, 0x8f, 0x48,
    0x16, 0x59, 0x61, 0xc9, 0x85, 0x9e, 0xc8, 0xb0,
    0x16, 0xd2, 0x74, 0x39, 0xdf, 0x33, 0xf5, 0x28,
    0x16, 0xe0, 0x63, 0x11, 0xa7, 0xc4, 0x05, 0xbd,
    0x16, 0x3a, 0xd9, 0x34, 0xca, 0xf9, 0xaa, 0xe2,
    0x16, 0x00, 0xe6, 0xe6, 0x38, 0x57, 0x3e, 0xec,
    0x16, 0x19, 0x7c, 0x0d, 0x27, 0x45, 0xc5, 0x52,
    0x16, 0xc4, 0xff, 0xf4, 0x69, 0xc5, 0xf5, 0x73,
    0x16, 0x73, 0x4f, 0xe3, 0x07, 0xc7, 0xcf, 0x38,
    0x16, 0x23, 0x5b, 0x9c, 0x99, 0xa2, 0x6a, 0x72,
    0x16, 0xb0, 0x35, 0x39, 0xc1, 0x0a, 0xc7, 0x1c,
    0x16, 0x1a, 0x30, 0x60, 0x18, 0x1d, 0x2b, 0xf0,
    0x16, 0xc8, 0xf1, 0x79, 0xa3, 0x94, 0xe3, 0x36,
    0x16, 0x35, 0x93, 0x69, 0x05, 0x91, 0x07, 0x12,
    0x16, 0x60, 0x44, 0xfd, 0xb6, 0xc6, 0xff, 0xe0,
    0x16, 0xcf, 0xa2, 0xcf, 0xc2, 0xa3, 0x58, 0xac,
    0x16, 0x32, 0xe3, 0x2e, 0xec, 0x0d, 0x9d, 0x1b,
    0x16, 0xfb, 0x05, 0x40, 0xba, 0x67, 0x8e, 0xcb,
    0x16, 0x38, 0xd7, 0x60, 0x9c, 0xfe, 0x9e, 0xa1,
    0x16, 0x70, 0xcc, 0x40, 0x72, 0x8c, 0x8c, 0x50,
    0x16, 0x71, 0x85, 0xdd, 0x84, 0x92, 0x5c, 0xee,
    0x16, 0x44, 0xb6, 0xe0, 0x80, 0x15, 0x32, 0xdd,
    0x16, 0x1b, 0x4b, 0x8c, 0x6e, 0x8e, 0x39, 0x97,
    0x16, 0xa5, 0xaf, 0xc6, 0xf4, 0x29, 0x85, 0xd3,
    0x16, 0x85, 0x93, 0x85, 0xc8, 0x54, 0xe4, 0x59,
    0x16, 0x1d, 0x4e, 0xa0, 0xfe, 0xc5, 0x07, 0xc1,
    0x16, 0xf7, 0x32, 0x52, 0xf9, 0x4d, 0x45, 0x85,
    0x16, 0xfc, 0xa0, 0xfa, 0x37, 0xb5, 0x9d, 0x47,
    0x16, 0xe8, 0x52, 0x23, 0x8d, 0x92, 0x87, 0x43,
    0x16, 0xb4, 0xb8, 0x4f, 0x95, 0x1b, 0x1e, 0x4f,
    0x16, 0xe5, 0x45, 0xbf, 0xce, 0xc8, 0x0c, 0xb2,
    0x16, 0x7d, 0xe7, 0xd9, 0x2e, 0x88, 0xb7, 0x2a,
    0x16, 0x61, 0xe1, 0x2d, 0xc4, 0x21, 0x2e, 0xb8,
    0x16, 0x4d, 0xfd, 0x21, 0x87, 0x30, 0x25, 0x11,
    0x16, 0xec, 0x1f, 0x29, 0x94, 0x31, 0xd2, 0x92,
    0x16, 0x85, 0x38, 0x17, 0xda, 0x63, 0x4d, 0x8c,
    0x16, 0xb4, 0x06, 0x55, 0x64, 0xb7, 0x6c, 0xfc,
    0x16, 0xc2, 0x8d, 0x5d, 0x97, 0x86, 0x09, 0xd3,
    0x16, 0x43, 0x69, 0xe8, 0x35, 0x77, 0xcc, 0xaf,
    0x16, 0x91, 0x36, 0x3c, 0x7c, 0xa3, 0x6e, 0x4e,
    0x16, 0x4a, 0xa2, 0xc9, 0x41, 0x50, 0xea, 0xab,
    0x16, 0xdf, 0x87, 0x04, 0x70, 0x4f, 0x16, 0xf5,
    0x16, 0xa0, 0x38, 0xf5, 0x60, 0x16, 0xcd, 0x0c,
    0x16, 0xe5, 0xc7, 0xe3, 0xad, 0x00, 0x12, 0x6b,
    0x16, 0x12, 0x85, 0x3c, 0x5c, 0x7f, 0x76, 0xed,
    0x16, 0x49, 0xf2, 0x9d, 0x8f, 0xdf, 0xab, 0xe1,
    0x16, 0xdd, 0x87, 0x01, 0xed, 0x2c, 0x1b, 0x4b,
    0x16, 0x55, 0x11, 0x7f, 0xc3, 0x92, 0xd3, 0x91,
    0x16, 0xc1, 0xd8, 0xa7, 0x37, 0xc7, 0xe5, 0x5b,
    0x16, 0x48, 0x2b, 0xed, 0x31, 0xde, 0xce, 0xfb,
    0x16, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0xe3, 0x51, 0x84, 0x00,
    0x16, 0x0b, 0x4d, 0x26, 0x73, 0x11, 0x8b, 0x1e,
    0x16, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0x04, 0x73, 0xe0, 0x72,
    0x16, 0xff, 0xe6, 0x59, 0xc9, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0x48, 0xbf, 0xab, 0xf3,
    0x16, 0x99, 0x87, 0x7c, 0x07, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0xfb, 0x33, 0xb1, 0x63,
    0x16, 0x61, 0x61, 0x12, 0xad, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0xaa, 0x30, 0xac, 0x17,
    0x16, 0x4d, 0x30, 0x86, 0xbf, 0x67, 0x13, 0xf1,
    0x16, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0x1b, 0x48, 0x42, 0x23,
    0x16, 0x84, 0xbb, 0x7f, 0xb4, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0xa6, 0x9f, 0x43, 0x78,
    0x16, 0x5c, 0xa1, 0x4e, 0x8b, 0xa6, 0xe6, 0x7c,
    0x16, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0xf7, 0x31, 0x5d, 0x27,
    0x16, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0x0b, 0x57, 0x0b, 0x79,
    0x16, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x02, 0x44, 0x33, 0xbb, 0xb4,
    0x16, 0x5b, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0xab, 0xe3, 0x01, 0xc2,
    0x16, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0x7a, 0x07, 0x9e, 0xad,
    0x16, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x02, 0xf1, 0xee, 0xf7, 0xd8,
    0x16, 0x29, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0x2c, 0x35, 0x54, 0x3a,
    0x16, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x01, 0xc9, 0x3d, 0x66, 0x6a,
    0x16, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x05, 0x24, 0x7a, 0xf7, 0x1c, 0x24,
    0x16, 0x40, 0xeb, 0xa2, 0x4d, 0xc2, 0x66, 0xc8,
    0x16, 0x37, 0x2c, 0x03, 0x0f, 0xf3, 0x01, 0x06,
    0x16, 0x6d, 0x9a, 0x42, 0xf0, 0x94, 0x8f, 0xed,
    0x16, 0xbf, 0xe3, 0x28, 0x3b, 0x72, 0x69, 0x37,
    0x16, 0x75, 0xb4, 0xa0, 0x9a, 0x6e, 0x31, 0xfd,
    0x16, 0x66, 0x5b, 0xcb, 0xf3, 0xba, 0x8c, 0xa4,
    0x16, 0x31, 0xff, 0xba, 0x7c, 0x24, 0x54, 0xd3,
    0x16, 0xc6, 0x63, 0x89, 0x93, 0xe4, 0xed, 0xda,
    0x16, 0x58, 0x47, 0x4e, 0xb5, 0x8f, 0xd7, 0x93,
    0x16, 0xfd, 0xaf, 0x31, 0xea, 0xb4, 0xec, 0xc9,
    0x16, 0x05, 0x7d, 0x2b, 0x15, 0x96, 0xc1, 0x00,
    0x16, 0x7e, 0x80, 0xe6, 0xf7, 0x47, 0xcd, 0x6a,
    0x16, 0x77, 0xf1, 0x0e, 0x59, 0x13, 0xaa, 0x5c,
    0x16, 0x83, 0x88, 0x70, 0xdc, 0xc4, 0x52, 0x52,
    0x16, 0x20, 0xb6, 0x69, 0x2d, 0x6c, 0x6c, 0x8b,
    0x16, 0x66, 0x2a, 0xcd, 0x5a, 0x41, 0x30, 0xd6,
    0x16, 0xfb, 0x7b, 0xa0, 0xec, 0x7a, 0x22, 0x88,
    0x16, 0x7c, 0x71, 0x6e, 0xaf, 0x62, 0x06, 0xf4,
    0x16, 0xa8, 0xc6, 0x88, 0x85, 0x76, 0x36, 0xc5,
    0x16, 0xc0, 0xd8, 0x67, 0x96, 0x7c, 0xe8, 0x4d,
    0x16, 0xd4, 0xfb, 0xa9, 0x6f, 0x0f, 0xb2, 0xa7,
    0x16, 0xa3, 0x19, 0x6a, 0x30, 0xfd, 0x6f, 0xfc,
    0x16, 0x2b, 0xce, 0xa4, 0x1b, 0x8e, 0x57, 0x48,
    0x16, 0x51, 0xc6, 0x98, 0x0f, 0xe5, 0x08, 0x7b,
    0x16, 0x4d, 0xfc, 0x59, 0xdd, 0xcf, 0x13, 0x1b,
    0x16, 0x31, 0x0c, 0x5e, 0x3b, 0x98, 0xe1, 0xf4,
    0x16, 0xc3, 0x41, 0xd7, 0xa2, 0x64, 0x5e, 0x16,
    0x16, 0xf9, 0xeb, 0xae, 0x20, 0xe9, 0x5d, 0x54,
    0x16, 0xbd, 0x99, 0xd3, 0xa7, 0xc1, 0xd9, 0xe5,
    0x16, 0x32, 0x22, 0xd6, 0x9f, 0x4f, 0xdd, 0x6b,
    0x16, 0x3c, 0x6d, 0xe9, 0x4d, 0x96, 0x52, 0x11,
    0x16, 0xda, 0x23, 0x86, 0xbe, 0x01, 0xc4, 0x51,
    0x16, 0xc2, 0x9c, 0xc6, 0xf5, 0x2f, 0x1f, 0xd0,
    0x16, 0xf1, 0xf5, 0x57, 0x82, 0xfe, 0xcb, 0xfb,
    0x16, 0x4a, 0xdf, 0x1d, 0x00, 0x46, 0xb8, 0xa7,
    0x16, 0x3a, 0x56, 0x66, 0x08, 0x71, 0x4e, 0x47,
    0x16, 0xf8, 0x27, 0x26, 0x5f, 0x6c, 0xd8, 0xc3,
    0x16, 0x05, 0x99, 0x0a, 0x75, 0x8f, 0x4f, 0xc1,
    0x16, 0x88, 0x72, 0xa0, 0x5a, 0x13, 0x08, 0xa3,
    0x16, 0x82, 0x84, 0x2e, 0xce, 0xb5, 0xa3, 0x46,
    0x16, 0x05, 0xd6, 0x6a, 0x78, 0x56, 0x44, 0x23,
    0x16, 0x86, 0xf2, 0xc9, 0x63, 0x08, 0x8b, 0xbd,
    0x16, 0xee, 0x56, 0xd4, 0x36, 0x1f, 0x37, 0x53,
    0x16, 0x18, 0xe7, 0xda, 0x1c, 0xfa, 0xd0, 0x05,
    0x16, 0xd5, 0x5f, 0xe7, 0xb7, 0xad, 0x36, 0x2b,
    0x16, 0xcb, 0x06, 0xc0, 0x53, 0xf4, 0x32, 0xa8,
    0x16, 0x75, 0x6f, 0xe3, 0xc9, 0xa1, 0xb0, 0xa6,
    0x16, 0xe6, 0xc2, 0x41, 0x0f, 0x5d, 0x2e, 0x0a,
    0x16, 0x64, 0x50, 0x46, 0x92, 0x49, 0x5b, 0x2d,
    0x16, 0x00, 0x2e, 0xb5, 0x21, 0x3f, 0x0b, 0x4a,
    0x16, 0x71, 0x96, 0x88, 0x84, 0x4c, 0x98, 0xaa,
    0x16, 0x28, 0x23, 0xeb, 0xef, 0x45, 0x5c, 0x62,
    0x16, 0x78, 0xd6, 0xe4, 0xfb, 0x6d, 0xc3, 0xd9,
    0x16, 0x35, 0x6c, 0xb9, 0x2a, 0xc6, 0x74, 0x71,
    0x16, 0xc4, 0x0c, 0x65, 0x7c, 0xa3, 0xf9, 0x6e,
    0x16, 0x2d, 0xb9, 0x86, 0xb0, 0x04, 0x63, 0x94,
    0x16, 0xcf, 0x26, 0x7d, 0x9e, 0x1e, 0xf7, 0x99,
    0x16, 0xda, 0xe0, 0x8c, 0xdd, 0x86, 0xf3, 0xc8,
    0x16, 0xf1, 0xc6, 0x4e, 0x15, 0x5d, 0xed, 0x34,
    0x16, 0xbb, 0x90, 0xcd, 0xd6, 0x26, 0x09, 0x1e,
    0x16, 0xf6, 0x23, 0x84, 0x51, 0xc1, 0xae, 0x42,
    0x16, 0x8f, 0x84, 0x96, 0xc9, 0x57, 0xae, 0x16,
    0x16, 0x36, 0x3a, 0x29, 0x87, 0x65, 0xb2, 0xba,
    0x16, 0x56, 0x96, 0xd2, 0xf5, 0x09, 0xef, 0x30,
    0x16, 0x4a, 0x0f, 0x62, 0x36, 0xfe, 0x00, 0x30,
    0x16, 0xbd, 0x09, 0x1b, 0x50, 0xc3, 0x3c, 0x48,
    0x16, 0xd7, 0x25, 0xe1, 0x8e, 0xb2, 0x6f, 0x4d,
    0x16, 0x75, 0x2d, 0xad, 0xc6, 0x1e, 0xba, 0xfa,
    0x16, 0x4f, 0x41, 0xaf, 0x7a, 0x6f, 0xa0, 0xa0,
    0x16, 0x4f, 0xb6, 0x88, 0x34, 0x69, 0x8a, 0x9e,
    0x16, 0x83, 0x7a, 0x60, 0xf3, 0xa8, 0x7e, 0x39,
    0x16, 0x2a, 0x20, 0x9c, 0x32, 0x5e, 0x7d, 0xc4,
    0x16, 0xaa, 0x97, 0xe6, 0x26, 0x35, 0x42, 0xa1,
    0x16, 0xa0, 0xef, 0x39, 0xb3, 0x1c, 0x27, 0x63,
    0x16, 0xd2, 0x7f, 0x75, 0xc0, 0x1e, 0xb4, 0xfa,
    0x16, 0x4d, 0x7a, 0x81, 0x81, 0x39, 0xe0, 0x79,
    0x16, 0x2f, 0x94, 0xa5, 0x28, 0x3a, 0x43, 0x7e,
    0x16, 0x97, 0xb5, 0x94, 0xaf, 0x2a, 0x10, 0x38,
    0x16, 0x0a, 0x7f, 0x49, 0x91, 0xc0, 0x6c, 0x65,
    0x16, 0x9a, 0xc6, 0xc9, 0x5d, 0xd5, 0x52, 0x46,
    0x16, 0x98, 0x74, 0xac, 0x93, 0xe4, 0x21, 0xb0,
    0x16, 0xeb, 0x08, 0xfa, 0xf4, 0x41, 0x2e, 0xa6,
    0x16, 0xf9, 0xc5, 0xed, 0xe3, 0x37, 0x98, 0xc5,
    0x16, 0xdf, 0x52, 0x82, 0x41, 0xa2, 0xf2, 0x56,
    0x16, 0x1a, 0xf3, 0xa4, 0xc6, 0x40, 0x8d, 0xb9,
    0x16, 0x5f, 0xaa, 0x75, 0x1e, 0x15, 0x1e, 0x68,
    0x16, 0x78, 0x2b, 0x2b, 0xf4, 0x3e, 0xc7, 0xcb,
    0x16, 0xf3, 0x13, 0x60, 0xe0, 0xf4, 0x85, 0x79,
    0x16, 0x88, 0x0c, 0x22, 0x75, 0x87, 0xb7, 0x51,
    0x16, 0xe0, 0xd6, 0xe3, 0xa0, 0x92, 0xd3, 0xd7,
    0x16, 0xe3, 0x6c, 0x5b, 0x3e, 0xb7, 0x80, 0xe7,
    0x16, 0x48, 0xd6, 0xd9, 0x2f, 0x49, 0xcc, 0x75,
    0x16, 0xa0, 0x04, 0xc9, 0x48, 0x88, 0xe9, 0xcc,
    0x16, 0x32, 0x41, 0xaf, 0x30, 0xde, 0xc6, 0xbc,
    0x16, 0x9d, 0xf7, 0xfc, 0xff, 0x69, 0x03, 0x50,
    0x16, 0x58, 0xa1, 0xd6, 0xb8, 0x7b, 0x5e, 0x60,
    0x16, 0xfc, 0xcc, 0x00, 0x14, 0xaf, 0x3a, 0x30,
    0x16, 0x41, 0xb3, 0x4e, 0x63, 0x47, 0x95, 0xe4,
    0x16, 0xbd, 0x53, 0x74, 0xd0, 0xf0, 0x02, 0xb4,
    0x16, 0xfe, 0x48, 0x19, 0x6c, 0x3f, 0x23, 0xf7,
    0x16, 0x9b, 0x44, 0x11, 0xf2, 0xc2, 0x45, 0xa6,
    0x16, 0x37, 0x77, 0x6c, 0x10, 0x63, 0x0e, 0x1b,
    0x16, 0xa7, 0xd1, 0x96, 0xca, 0x0d, 0x4f, 0x5b,
    0x16, 0x43, 0x51, 0xd6, 0x14, 0xb7, 0x23, 0xe7,
    0x16, 0x99, 0xa4, 0x9f, 0x4c, 0x7d, 0xd7, 0xdd,
    0x16, 0x08, 0x11, 0x84, 0x4d, 0x5c, 0xe9, 0x60,
    0x16, 0x90, 0x04, 0x8b, 0x14, 0x90, 0xf0, 0x6f,
    0x16, 0x26, 0x45, 0x0f, 0x20, 0x8c, 0xe3, 0x6f,
    0x16, 0x46, 0x78, 0xeb, 0x12, 0xb4, 0x5e, 0xf0,
    0x16, 0xde, 0xeb, 0x22, 0x27, 0x62, 0x78, 0x42,
    0x16, 0x93, 0xbc, 0xe8, 0x48, 0xc0, 0x88, 0xbd,
    0x16, 0x0f, 0xde, 0x23, 0x2b, 0xd1, 0x88, 0x0a,
    0x16, 0xe2, 0xb4, 0x33, 0x8e, 0x61, 0x36, 0x43,
    0x16, 0x58, 0x42, 0xae, 0x6b, 0xd7, 0xf2, 0xfe,
    0x16, 0x0a, 0xc1, 0x26, 0x94, 0x7a, 0xce, 0x8c,
    0x16, 0x3b, 0x43, 0x5a, 0x62, 0xef, 0x70, 0x8a,
    0x16, 0xfe, 0x4d, 0xd2, 0x37, 0xdb, 0xa1, 0xb1,
    0x16, 0x06, 0x1b, 0x30, 0x17, 0x4c, 0xa0, 0x24,
    0x16, 0x1e, 0xbe, 0xcb, 0x64, 0xe2, 0xce, 0x13,
    0x16, 0x5c, 0xd7, 0x05, 0xa6, 0x76, 0x39, 0x38,
    0x16, 0xf3, 0x85, 0x2c, 0x16, 0x0e, 0xb3, 0xe2,
    0x16, 0x3d, 0xff, 0x79, 0x88, 0x0b, 0x93, 0xef,
    0x16, 0xad, 0x55, 0xcd, 0xb4, 0xef, 0x8f, 0xb8,
    0x16, 0x16, 0x7a, 0x05, 0xc0, 0x5e, 0x92, 0x0f,
    0x16, 0x4f, 0x98, 0x58, 0xd4, 0x22, 0xad, 0x43,
    0x16, 0x25, 0x31, 0x78, 0x52, 0xc6, 0x9a, 0xca,
    0x16, 0x5e, 0xa6, 0x4e, 0x79, 0x97, 0x9a, 0xbb,
    0x16, 0xdf, 0x6d, 0xf1, 0xe2, 0xd0, 0xb3, 0xca,
    0x16, 0x2a, 0x5c, 0x46, 0x82, 0x5c, 0x1e, 0xdd,
    0x16, 0xd0, 0xc5, 0x19, 0x89, 0x2b, 0x2c, 0xbd,
    0x16, 0xc0, 0x84, 0xd9, 0x33, 0x39, 0x67, 0xe4,
    0x16, 0xe4, 0x79, 0x26, 0xb6, 0x9d, 0x1c, 0x1d,
    0x16, 0xe4, 0x70, 0xa5, 0xa7, 0x61, 0x89, 0x25,
    0x16, 0x4a, 0x57, 0x33, 0x7d, 0x0d, 0xca, 0xf3,
    0x16, 0xcc, 0x22, 0xaa, 0xd7, 0xd9, 0xcb, 0xe6,
    0x16, 0xb2, 0x96, 0x46, 0x15, 0x95, 0x68, 0xd8,
    0x16, 0x0f, 0xdf, 0x6b, 0x36, 0xda, 0x19, 0x82,
    0x16, 0x16, 0xce, 0x38, 0x4e, 0xcf, 0xf2, 0x36,
    0x16, 0xc8, 0x80, 0x07, 0x53, 0x88, 0x04, 0x2f,
    0x16, 0xb2, 0x14, 0x19, 0x5d, 0xc5, 0x6c, 0xef,
    0x16, 0x95, 0x9c, 0x60, 0x8b, 0x6a, 0xe4, 0xfc,
    0x16, 0x9d, 0xb2, 0x9c, 0xed, 0x1d, 0x9c, 0x1b,
    0x16, 0xca, 0xa3, 0x26, 0xdd, 0x9c, 0x63, 0x5b,
    0x16, 0x3b, 0x88, 0x2b, 0xba, 0x22, 0x35, 0x24,
    0x16, 0x01, 0x48, 0xee, 0xa0, 0x4f, 0x6e, 0x96,
    0x16, 0x4e, 0x29, 0x91, 0xaa, 0xaf, 0x56, 0x47,
    0x16, 0xbd, 0x7b, 0xdd, 0xa1, 0x55, 0x99, 0xd8,
    0x16, 0xb5, 0xa1, 0x47, 0x93, 0x7b, 0xcd, 0x7b,
    0x16, 0xcf, 0x65, 0xde, 0x50, 0x18, 0xf2, 0x05,
    0x16, 0x49, 0xf1, 0x99, 0xd8, 0x94, 0x21, 0x3f,
    0x16, 0x7d, 0x52, 0xc6, 0xb1, 0xb4, 0xe1, 0x9f,
    0x16, 0xf0, 0x7e, 0x60, 0x64, 0x8b, 0x30, 0xe4,
    0x16, 0xad, 0x2c, 0x97, 0xfb, 0x47, 0xf7, 0x09,
    0x16, 0x01, 0x04, 0x7b, 0xf4, 0xf7, 0xa7, 0xa8,
    0x16, 0x04, 0xa5, 0x7f, 0x08, 0x58, 0x79, 0x6d,
    0x16, 0x26, 0x27, 0x6a, 0xd0, 0xd9, 0xaf, 0xc1,
    0x16, 0xc7, 0x12, 0x23, 0xe1, 0xae, 0x98, 0xa4,
    0x16, 0x0f, 0xbc, 0x1b, 0xfa, 0x9d, 0x91, 0x0b,
    0x16, 0x15, 0x15, 0xa5, 0x24, 0x53, 0x1a, 0x13,
    0x16, 0xe0, 0xc3, 0x00, 0x95, 0x38, 0x9c, 0x36,
    0x16, 0x4c, 0xcf, 0xf6, 0xa9, 0xbc, 0xc1, 0x53,
    0x16, 0x06, 0x04, 0xf4, 0x6f, 0xbf, 0x57, 0xe0,
    0x16, 0xa6, 0x14, 0xa6, 0x49, 0x70, 0x7f, 0x39,
    0x16, 0x2a, 0x4a, 0x5a, 0x59, 0x36, 0x33, 0xb9,
    0x16, 0x0d, 0x47, 0x25, 0x39, 0x37, 0x04, 0x77,
    0x16, 0x7c, 0x45, 0xac, 0x19, 0x93, 0x25, 0x49,
    0x16, 0xe0, 0x7a, 0x7b, 0xa2, 0xc6, 0x95, 0x76,
    0x16, 0x8d, 0x3c, 0x79, 0xb1, 0xa7, 0xc3, 0x83,
    0x16, 0x63, 0x03, 0x23, 0x47, 0xd7, 0xac, 0xfb,
    0x16, 0x84, 0x16, 0x6f, 0x22, 0x49, 0x0b, 0x97,
    0x16, 0xaa, 0xd5, 0x38, 0x57, 0x5e, 0x2b, 0xbb,
    0x16, 0xa7, 0x49, 0xed, 0xd2, 0xd5, 0x7a, 0x96,
    0x16, 0xbe, 0x8d, 0xf5, 0xf9, 0x46, 0x56, 0xf5,
    0x16, 0x2f, 0xa7, 0xa8, 0x7a, 0xff, 0x3f, 0xe7,
    0x16, 0xe8, 0x8c, 0xf1, 0x48, 0xe8, 0x46, 0xcb,
    0x16, 0x4d, 0x25, 0xf9, 0x35, 0x93, 0x2f, 0xce,
    0x16, 0x8b, 0xb8, 0xa9, 0xc5, 0xd3, 0xd2, 0x27,
    0x16, 0x71, 0x86, 0x6f, 0x72, 0xd9, 0xca, 0x4e,
    0x16, 0x90, 0xd3, 0x6d, 0xb1, 0x3c, 0xd3, 0xcb,
    0x16, 0xc9, 0x30, 0x3a, 0x26, 0x45, 0x9d, 0x66,
    0x16, 0x44, 0x5c, 0x5f, 0xd8, 0xe3, 0x90, 0x7c,
    0x16, 0x1b, 0xd8, 0x82, 0xdd, 0xd3, 0x84, 0xd4,
    0x16, 0xc6, 0x1b, 0x58, 0xbf, 0x02, 0xa5, 0x3b,
    0x16, 0x10, 0x0a, 0x3e, 0xe3, 0x09, 0x94, 0x0b,
    0x16, 0x99, 0x88, 0x2b, 0x47, 0xa7, 0x90, 0x89,
    0x16, 0xc4, 0x48, 0x25, 0x36, 0xdb, 0x72, 0x31,
    0x16, 0xac, 0xf5, 0xa3, 0x01, 0x15, 0xd0, 0xe6,
    0x16, 0x21, 0x61, 0xeb, 0x59, 0x72, 0xdc, 0x94,
    0x15, 0x00, 0x00, 0x98, 0xf7, 0xb0, 0xf9, 0xfa,
    0x16, 0xc1, 0x0a, 0x7e, 0xdc, 0x69, 0xce, 0x90,
    0x16, 0x5e, 0x82, 0x11, 0x0b, 0x97, 0xe2, 0x99,
    0x16, 0x55, 0xa2, 0x3d, 0xfa, 0xeb, 0x88, 0xbc,
    0x16, 0x4d, 0xc2, 0x54, 0x8d, 0x5f, 0xde, 0xa3,
    0x16, 0xe2, 0x48, 0x13, 0x20, 0x46, 0xc5, 0xa0,
    0x16, 0x81, 0x04, 0xc4, 0x2b, 0x9a, 0x84, 0x15,
    0x16, 0xb8, 0x9e, 0x9b, 0x62, 0xa1, 0xec, 0x7d,
    0x16, 0x08, 0x3c, 0xad, 0x21, 0x4b, 0x89, 0xfc,
    0x16, 0xc6, 0x96, 0x7c, 0x3a, 0x41, 0x35, 0x8a,
    0x16, 0x13, 0xbd, 0x1b, 0x43, 0xbf, 0x36, 0x7a,
    0x16, 0x4e, 0xce, 0x70, 0x9e, 0x2a, 0xf6, 0x39,
    0x16, 0x33, 0xc7, 0x33, 0x4b, 0x34, 0x7d, 0x2a,
    0x16, 0x81, 0xfa, 0x25, 0x2e, 0xc5, 0xc4, 0xa1,
    0x16, 0x28, 0x0e, 0xd5, 0x4d, 0x15, 0xe0, 0x69,
    0x16, 0x12, 0x71, 0x19, 0xaa, 0xff, 0x59, 0x48,
    0x16, 0x81, 0x56, 0x53, 0xc9, 0x35, 0x12, 0x4d,
    0x16, 0x84, 0x69, 0x91, 0x36, 0xd8, 0xad, 0xf7,
    0x16, 0x54, 0xd5, 0x8c, 0xf9, 0xc6, 0x84, 0x12,
    0x16, 0x62, 0x22, 0xf1, 0xb9, 0x2b, 0x1d, 0xa5,
    0x16, 0x7c, 0x56, 0x7a, 0x4d, 0x5a, 0xc4, 0xf0,
    0x16, 0x9d, 0x8f, 0x5d, 0xb5, 0x9a, 0x7f, 0xe7,
    0x16, 0xb7, 0xa8, 0x5d, 0x6d, 0x37, 0x00, 0x00,
    0x15, 0x00, 0x00, 0xe4, 0xf2, 0xea, 0x7a, 0x73,
    0x16, 0xf8, 0xfc, 0x67, 0x17, 0xf3, 0xd9, 0x60,
    0x16, 0x09, 0x0e, 0x8b, 0x0f, 0xe2, 0xf9, 0x83,
    0x16, 0x61, 0xdf, 0x53, 0x69, 0xd0, 0xee, 0x42,
    0x16, 0x51, 0xb5, 0x51, 0x48, 0x64, 0xf8, 0xdd,
    0x16, 0x3e, 0xee, 0xa7, 0x47, 0xf0, 0x7c, 0x4b,
    0x16, 0xbb, 0x2b, 0x8e, 0xe2, 0x8b, 0x60, 0x57,
    0x16, 0x63, 0x4b, 0x9b, 0xaa, 0x67, 0x63, 0xea,
    0x16, 0xa3, 0xd5, 0x7c, 0x43, 0x41, 0xa9, 0x54,
    0x16, 0x74, 0xd2, 0x86, 0xc3, 0x11, 0x42, 0x69,
    0x16, 0xc5, 0x09, 0x3e, 0x8f, 0x94, 0xaf, 0xc5,
    0x16, 0x99, 0xbb, 0xbb, 0xac, 0x61, 0x64, 0x61,
    0x16, 0x01, 0xf2, 0xd3, 0x59, 0xb1, 0x41, 0x50,
    0x16, 0x91, 0x16, 0x6c, 0xcc, 0x9b, 0xec, 0x5c,
    0x16, 0xfe, 0x3b, 0xb3, 0xec, 0x6e, 0xd7, 0xf1,
    0x16, 0x0e, 0x5a, 0x8a, 0x5f, 0x1d, 0xb0, 0xc5,
    0x16, 0x76, 0x54, 0x26, 0x07, 0xbc, 0x66, 0xf0,
    0x16, 0xed, 0x51, 0x9a, 0x1f, 0xe8, 0xf7, 0x51,
    0x16, 0x58, 0x8e, 0x1e, 0x80, 0x99, 0x1f, 0xee,
    0x16, 0xd6, 0x43, 0xcc, 0xfa, 0x2f, 0xae, 0x80,
    0x16, 0xf2, 0xa8, 0xa8, 0xae, 0x43, 0x7c, 0x80,
    0x16, 0x76, 0xd4, 0x1a, 0xd4, 0x73, 0x74, 0x61,
    0x16, 0xdf, 0xbf, 0x29, 0x6f, 0x56, 0x15, 0x93,
    0x16, 0x07, 0x58, 0x92, 0xf1, 0x1d, 0xe8, 0x7b,
    0x16, 0x68, 0xb2, 0x54, 0x20, 0x30, 0x01, 0x2d,
    0x16, 0xc5, 0xd8, 0xfd, 0x61, 0x50, 0x14, 0x0f,
    0x16, 0x58, 0x4c, 0x1a, 0x54, 0x00, 0x12, 0x7e,
    0x16, 0x46, 0x99, 0x0c, 0x9d, 0xd1, 0xa3, 0x04,
    0x16, 0xf1, 0x82, 0x17, 0xfe, 0xfc, 0x12, 0xe5,
    0x16, 0x75, 0x81, 0xaf, 0xff, 0x3d, 0x08, 0xd5,
    0x16, 0x39, 0x87, 0x4a, 0x8e, 0xf0, 0x7a, 0xd4,
    0x16, 0xd0, 0xd6, 0xcf, 0xa9, 0xd6, 0x59, 0x48,
    0x16, 0x41, 0xc2, 0x68, 0xe3, 0xa4, 0x35, 0x45,
    0x16, 0x8d, 0x14, 0x1a, 0xc4, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x44, 0x89, 0x2c, 0x63, 0xc8,
    0x16, 0xaf, 0x7b, 0xac, 0x35, 0x43, 0x27, 0xbe,
    0x16, 0x7e, 0xcf, 0x56, 0x40, 0x3d, 0xa5, 0xac,
    0x16, 0x0f, 0x97, 0xcc, 0xd4, 0x6e, 0xd0, 0x31,
    0x16, 0xd7, 0x14, 0x60, 0x45, 0xae, 0xdf, 0x0a,
    0x16, 0xaa, 0x33, 0xb3, 0x88, 0xe0, 0x1c, 0x26,
    0x16, 0xdc, 0x00, 0xb8, 0x75, 0xc8, 0x67, 0x11,
    0x16, 0xa1, 0xb5, 0x87, 0x71, 0xf9, 0x4a, 0x6a,
    0x16, 0xec, 0x3f, 0x0e, 0x41, 0x21, 0xc2, 0x4f,
    0x16, 0x92, 0x8f, 0x17, 0x53, 0xee, 0xd5, 0xea,
    0x16, 0x4f, 0x91, 0x75, 0x02, 0x59, 0x00, 0x00,
    0x15, 0x00, 0x02, 0x94, 0xe4, 0xda, 0x4a, 0xb3,
    0x16, 0xaa, 0xa7, 0x2e, 0x9c, 0xc7, 0x80, 0x46,
    0x16, 0x5e, 0xbd, 0x06, 0x33, 0x1d, 0xd8, 0x5d,
    0x16, 0x9f, 0x5f, 0x77, 0x73, 0x0a, 0x7d, 0x38,
    0x16, 0x6b, 0xa7, 0x0e, 0x8f, 0x4e, 0x7d, 0x01,
    0x16, 0xda, 0x44, 0x74, 0xd2, 0xf1, 0x7a, 0x2f,
    0x16, 0x7f, 0xe1, 0xec, 0xf1, 0xa5, 0x7d, 0x03,
    0x16, 0x3b, 0x2f, 0x17, 0xb6, 0xe8, 0x0d, 0x33,
    0x16, 0x3c, 0x21, 0x91, 0x91, 0x5b, 0x30, 0x2c,
    0x16, 0x11, 0xc6, 0x58, 0x6a, 0xe4, 0x35, 0x1b,
    0x16, 0xb5, 0xa8, 0x47, 0xb3, 0xff, 0xd0, 0x96,
    0x16, 0x0e, 0x48, 0x4e, 0x97, 0x37, 0x60, 0x12,
    0x16, 0x04, 0xff, 0xcb, 0xa5, 0xf5, 0x1d, 0x40,
    0x16, 0x9c, 0xdf, 0x36, 0x12, 0x3d, 0xd9, 0x2a,
    0x16, 0x72, 0xda, 0xe8, 0x8b, 0xe4, 0x5b, 0xcf,
    0x16, 0xe9, 0x38, 0x52, 0xec, 0x2c, 0xa0, 0xf7,
    0x16, 0x79, 0xad, 0x20, 0x70, 0x59, 0x20, 0x62,
    0x16, 0x73, 0x9c, 0xe3, 0x46, 0x09, 0xc9, 0x12,
    0x16, 0xd4, 0x77, 0x55, 0x07, 0x4b, 0x6a, 0x26,
    0x16, 0x1e, 0x5d, 0x07, 0x78, 0x10, 0x4e, 0x4a,
    0x16, 0xda, 0x5e, 0xf6, 0x3b, 0x9b, 0x8d, 0xfd,
    0x16, 0x48, 0xd0, 0xbb, 0xaa, 0x21, 0x2e, 0xf5,
    0x16, 0xdf, 0x85, 0x4c, 0xa7, 0x1d, 0x1a, 0x26,
    0x16, 0x1b, 0xa0, 0x82, 0x86, 0x7f, 0x4b, 0x02,
    0x16, 0xd2, 0xf6, 0x60, 0xc9, 0x86, 0x0c, 0x1d,
    0x16, 0xbf, 0x73, 0x69, 0x86, 0x18, 0x4b, 0x44,
    0x16, 0xbc, 0x74, 0xe5, 0x82, 0x17, 0x93, 0xb5,
    0x16, 0x0a, 0x56, 0x08, 0xb7, 0x4a, 0x73, 0xb8,
    0x16, 0x04, 0xd2, 0x14, 0x21, 0x5e, 0x2c, 0xa0,
    0x16, 0xe0, 0xc2, 0x01, 0x5f, 0xde, 0xce, 0x64,
    0x16, 0x2a, 0xd8, 0x65, 0x2b, 0xf0, 0x74, 0xe3,
    0x16, 0x54, 0xbf, 0xa0, 0x9b, 0x50, 0xba, 0x02,
    0x16, 0x00, 0x2c, 0x95, 0xce, 0x2a, 0x4f, 0xcf,
    0x16, 0x2b, 0x2b, 0x0e, 0x9b, 0xdd, 0x8f, 0x67,
    0x16, 0x5b, 0x54, 0xa1, 0x47, 0x2e, 0x84, 0x2e,
    0x16, 0x24, 0xfa, 0x34, 0xe0, 0x5a, 0x10, 0x3b,
    0x16, 0xcf, 0xaf, 0xe2, 0xed, 0x28, 0xd1, 0x17,
    0x16, 0x6b, 0x9a, 0x1b, 0x49, 0x6c, 0xfc, 0xcb,
    0x16, 0x7a, 0x74, 0x09, 0x2a, 0x41, 0x5a, 0xff,
    0x16, 0xa1, 0xf5, 0x98, 0xc6, 0x0c, 0xd2, 0x69,
    0x16, 0x83, 0xd2, 0xc3, 0x69, 0x87, 0x5e, 0x7e,
    0x16, 0xbb, 0xfc, 0xc0, 0xd1, 0xc1, 0x17, 0xd7,
    0x16, 0x9b, 0xe1, 0x53, 0x70, 0xb7, 0x43, 0xd0,
    0x16, 0x38, 0x25, 0x26, 0x49, 0x40, 0x5b, 0x57,
    0x16, 0xba, 0x49, 0x32, 0xaa, 0x9f, 0x39, 0xaa,
    0x16, 0x8e, 0x73, 0x00, 0x85, 0x13, 0x79, 0x6d,
    0x16, 0xf1, 0x91, 0x2f, 0x9e, 0xa3, 0xa0, 0x65,
    0x16, 0x7c, 0x7d, 0x53, 0xb4, 0x70, 0x53, 0x01,
    0x16, 0x6b, 0x92, 0x5f, 0x38, 0xf1, 0xd7, 0x3d,
    0x16, 0x7a, 0xd6, 0x07, 0x72, 0x7a, 0xdb, 0xa1,
    0x16, 0x65, 0xa5, 0x07, 0x41, 0x00, 0x4b, 0xeb,
    0x16, 0xc5, 0xd0, 0x3b, 0xeb, 0x30, 0x61, 0x42,
    0x16, 0x0d, 0x4b, 0xa3, 0xd8, 0x07, 0x8b, 0x12,
    0x16, 0xf5, 0x89, 0x3d, 0x7c, 0xfb, 0x2e, 0x79,
    0x16, 0xa7, 0xbc, 0xd5, 0xbf, 0x72, 0x9a, 0xd8,
    0x16, 0x15, 0x39, 0xad, 0x25, 0x70, 0xd1, 0x6c,
    0x16, 0xb0, 0x5d, 0xbb, 0xf4, 0x3a, 0xf6, 0x60,
    0x16, 0x56, 0xfa, 0xf2, 0xa5, 0x28, 0xae, 0x0d,
    0x16, 0x76, 0xb3, 0x79, 0xf1, 0x4b, 0xc7, 0x2e,
    0x16, 0x6e, 0xb6, 0x61, 0x62, 0x22, 0xd9, 0xa7,
    0x16, 0x30, 0x23, 0x45, 0x21, 0xde, 0x47, 0x8c,
    0x16, 0xeb, 0xe5, 0x4c, 0x8b, 0x4e, 0x79, 0xa0,
    0x16, 0x9d, 0x95, 0xb3, 0x05, 0xaa, 0xaf, 0xec,
    0x16, 0xe6, 0x74, 0x73, 0xf0, 0xdc, 0x37, 0xad,
    0x16, 0x93, 0x3b, 0x20, 0x6d, 0xa1, 0xd8, 0xcf,
    0x16, 0xf9, 0x7e, 0x9e, 0xc6, 0xbb, 0x40, 0x64,
    0x16, 0x56, 0xa6, 0x18, 0x75, 0x28, 0xd2, 0xba,
    0x16, 0x78, 0x64, 0x5c, 0x48, 0x45, 0x70, 0x35,
    0x16, 0x8c, 0x49, 0x9a, 0x45, 0x4a, 0x6d, 0xf2,
    0x16, 0x9c, 0x8d, 0x48, 0x0a, 0x61, 0x2e, 0xe3,
    0x16, 0xd4, 0xee, 0xa8, 0x29, 0x40, 0x4b, 0x53,
    0x16, 0xbb, 0x56, 0x39, 0xce, 0x81, 0x6c, 0xfd,
    0x16, 0x37, 0xa0, 0x79, 0x1c, 0xc7, 0x94, 0x17,
    0x16, 0x6c, 0x37, 0xea, 0x97, 0xf4, 0xd8, 0xd4,
    0x16, 0x9f, 0x9f, 0x30, 0x4f, 0xe5, 0xa4, 0x08,
    0x16, 0xb8, 0x6b, 0xae, 0xb9, 0xbc, 0x4f, 0x61,
    0x16, 0x20, 0x44, 0xdf, 0x92, 0xdb, 0x1e, 0x04,
    0x16, 0x83, 0xc0, 0xa1, 0x2c, 0x09, 0xd8, 0xdf,
    0x16, 0x21, 0xf0, 0x20, 0x04, 0x80, 0xaf, 0x73,
    0x16, 0x91, 0xbc, 0x0e, 0xba, 0xe4, 0xf7, 0x9b,
    0x16, 0x36, 0x3c, 0x30, 0xf1, 0xb4, 0xba, 0xdc,
    0x16, 0xfa, 0x65, 0xf2, 0x2b, 0x1d, 0x18, 0x4e,
    0x16, 0x16, 0x62, 0xd4, 0xac, 0x8b, 0x21, 0xa5,
    0x16, 0xa2, 0xf1, 0x32, 0xc3, 0xc9, 0x65, 0x63,
    0x16, 0x2d, 0x31, 0x6b, 0xb8, 0x8f, 0xe1, 0x24,
    0x16, 0x93, 0x87, 0x04, 0x99, 0xe6, 0xbd, 0xba,
    0x16, 0x28, 0x30, 0x63, 0xda, 0xac, 0xc7, 0x99,
    0x16, 0x37, 0x8a, 0x86, 0x66, 0xb3, 0x44, 0xd5,
    0x16, 0x84, 0xaa, 0xa1, 0x53, 0x42, 0xa0, 0x38,
    0x16, 0x1e, 0x5d, 0xf7, 0x05, 0x29, 0xe7, 0xca,
    0x16, 0x2a, 0x0b, 0x6a, 0xab, 0xce, 0xf0, 0x3a,
    0x16, 0xf3, 0x90, 0xe6, 0xd1, 0x25, 0xa1, 0x33,
    0x16, 0x1c, 0x33, 0x99, 0x7d, 0x24, 0xd1, 0x74,
    0x16, 0x23, 0xfc, 0x6f, 0x7d, 0xdb, 0xa7, 0xe9,
    0x16, 0xc2, 0xde, 0x17, 0x12, 0x2d, 0x1c, 0xb3,
    0x16, 0x7e, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x03, 0x08, 0x75, 0x7d, 0x9a, 0x49,
    0x16, 0x37, 0xaf, 0x60, 0x04, 0x7c, 0xbc, 0xd3,
    0x16, 0x1c, 0x53, 0x70, 0x34, 0x97, 0xeb, 0xe1,
    0x16, 0xcd, 0x30, 0x79, 0xa2, 0x86, 0x94, 0x58,
    0x16, 0x5a, 0x99, 0xc2, 0x69, 0xd7, 0xb2, 0x32,
    0x16, 0x62, 0x6c, 0x0a, 0x36, 0x69, 0xb1, 0x35,
    0x16, 0x48, 0x41, 0xce, 0x79, 0x96, 0x7a, 0x0d,
    0x16, 0x2d, 0x33, 0xbf, 0x4d, 0x2f, 0xb8, 0xd8,
    0x16, 0xb3, 0xfb, 0xe4, 0x71, 0x93, 0xb9, 0x18,
    0x16, 0x0d, 0x51, 0xab, 0xbb, 0x09, 0xd9, 0x0d,
    0x16, 0xd7, 0x67, 0x1e, 0x47, 0x28, 0xc7, 0xf7,
    0x16, 0xce, 0x60, 0x58, 0x28, 0x23, 0x5e, 0x95,
    0x16, 0xfc, 0x2b, 0xdb, 0xf9, 0x0d, 0x1f, 0xab,
    0x16, 0x49, 0xe6, 0xd0, 0xa7, 0x37, 0x79, 0x20,
    0x16, 0xe4, 0xcf, 0x05, 0xe3, 0x64, 0x21, 0xac,
    0x16, 0xdf, 0xb1, 0xe8, 0xf9, 0xe0, 0x4c, 0x3b,
    0x16, 0x5e, 0x89, 0x68, 0x2a, 0x48, 0xc5, 0x64,
    0x16, 0x0e, 0xdb, 0xf1, 0x53, 0x8b, 0x1a, 0x2f,
    0x16, 0xf6, 0x0c, 0x18, 0x9c, 0x52, 0x9b, 0x21,
    0x16, 0x2e, 0x4a, 0xe7, 0xd6, 0xbb, 0xb7, 0x1a,
    0x16, 0x0a, 0x22, 0xab, 0x4a, 0xfd, 0xd3, 0x02,
    0x16, 0x7d, 0x21, 0xff, 0xb9, 0x0e, 0x0f, 0x29,
    0x16, 0xab, 0xac, 0xf4, 0x44, 0x5e, 0x0f, 0xd5,
    0x16, 0xf3, 0x57, 0xe5, 0x4f, 0x61, 0x72, 0x4e,
    0x16, 0xba, 0x55, 0x37, 0x8f, 0x9a, 0x1c, 0xd4,
    0x16, 0xb8, 0x30, 0xaf, 0x0a, 0x95, 0x1a, 0x13,
    0x16, 0x86, 0xd4, 0x0a, 0x83, 0x5c, 0x99, 0x1b,
    0x16, 0x2b, 0xc0, 0x93, 0xf5, 0x13, 0xf5, 0xea,
    0x16, 0xfb, 0x6f, 0x75, 0x74, 0x6c, 0x2e, 0x77,
    0x16, 0xc3, 0x44, 0xc5, 0x38, 0x62, 0xb9, 0xf5,
    0x16, 0xac, 0x58, 0xb4, 0x96, 0x6e, 0xa4, 0xa5,
    0x16, 0x45, 0xb5, 0x1b, 0x7c, 0x9d, 0x21, 0x95,
    0x16, 0x16, 0xee, 0x29, 0x57, 0x20, 0x12, 0xbb,
    0x16, 0xf8, 0x0a, 0x23, 0x25, 0xac, 0x51, 0xfd,
    0x16, 0x7a, 0xe0, 0x9d, 0x43, 0xb0, 0x27, 0x6f,
    0x16, 0x2a, 0xdf, 0x04, 0x08, 0xd3, 0xf1, 0x1d,
    0x16, 0x3c, 0x12, 0x8d, 0xaf, 0xf2, 0xd7, 0xb9,
    0x16, 0x02, 0x9d, 0x46, 0xe3, 0xab, 0xff, 0x61,
    0x16, 0xc8, 0x61, 0x2b, 0x19, 0xc8, 0xc1, 0xa1,
    0x16, 0x6d, 0x0a, 0xa7, 0x44, 0xfa, 0xb5, 0xa8,
    0x16, 0xd7, 0x1e, 0x53, 0x15, 0x6f, 0x7a, 0x48,
    0x16, 0x41, 0xe9, 0x30, 0xb5, 0xad, 0xe2, 0xf0,
    0x16, 0x70, 0x40, 0x6a, 0xf3, 0x31, 0xdd, 0x19,
    0x16, 0x50, 0xe5, 0xbc, 0xb4, 0x3d, 0x83, 0x9f,
    0x16, 0xdf, 0xc8, 0x25, 0x27, 0x90, 0x40, 0x5b,
    0x16, 0x32, 0x04, 0x47, 0x81, 0xfa, 0x53, 0xb4,
    0x16, 0x0a, 0x40, 0x15, 0x7a, 0x74, 0x5b, 0xdb,
    0x16, 0x24, 0xab, 0x3a, 0xb7, 0x91, 0xe3, 0x44,
    0x16, 0xb7, 0x47, 0x07, 0x39, 0x90, 0xd2, 0xf5,
    0x16, 0xa9, 0x08, 0x46, 0x58, 0xdc, 0x32, 0x10,
    0x16, 0xa3, 0x47, 0x32, 0x04, 0x45, 0x44, 0x13,
    0x16, 0x71, 0xac, 0x2e, 0xa7, 0xc9, 0x71, 0xd0,
    0x16, 0xf9, 0x51, 0x7e, 0xca, 0xe5, 0x09, 0xa8,
    0x16, 0x1e, 0x77, 0x5b, 0x3a, 0x08, 0xaa, 0x43,
    0x16, 0x1c, 0xd6, 0x8d, 0x60, 0x91, 0x46, 0x6d,
    0x16, 0x64, 0x56, 0x9e, 0x16, 0x2e, 0xce, 0xb3,
    0x16, 0x99, 0xc8, 0xf6, 0x55, 0x27, 0x13, 0x84,
    0x16, 0xbc, 0x8a, 0xb3, 0xc8, 0xf5, 0x1a, 0x72,
    0x16, 0xf7, 0x6a, 0x0c, 0x46, 0x95, 0x2f, 0x4a,
    0x16, 0x86, 0xb6, 0xd2, 0x98, 0x94, 0xf1, 0xc3,
    0x16, 0x37, 0x0e, 0x0c, 0x87, 0x11, 0x56, 0x7e,
    0x16, 0xaf, 0xda, 0x22, 0x29, 0x6f, 0xeb, 0xfa,
    0x16, 0xec, 0x96, 0xe0, 0x27, 0x6b, 0x42, 0xa1,
    0x16, 0x70, 0x09, 0x1a, 0xad, 0x48, 0x88, 0xda,
    0x16, 0xfc, 0xe1, 0x3b, 0x62, 0x95, 0x28, 0x56,
    0x16, 0x70, 0x28, 0x03, 0xb2, 0x58, 0x67, 0x8d,
    0x16, 0x0a, 0xea, 0x9a, 0x15, 0x95, 0x51, 0x5f,
    0x16, 0x83, 0x07, 0x09, 0x20, 0xbf, 0x37, 0xaf,
    0x16, 0xf7, 0x0a, 0x74, 0x3c, 0xa5, 0x52, 0xf1,
    0x16, 0xe3, 0xf5, 0x58, 0x30, 0xe1, 0x17, 0xde,
    0x16, 0x98, 0xf1, 0x38, 0x7b, 0xf0, 0xaf, 0xbd,
    0x16, 0x16, 0x59, 0x52, 0x99, 0x6c, 0x74, 0x70,
    0x16, 0x48, 0x77, 0x14, 0xff, 0x53, 0x41, 0x84,
    0x16, 0xbc, 0xc5, 0x37, 0x2f, 0x71, 0x84, 0x3d,
    0x16, 0xf5, 0x46, 0x7c, 0x63, 0xe0, 0x00, 0xa0,
    0x16, 0x56, 0x07, 0xf7, 0x8c, 0x63, 0x57, 0xbe,
    0x16, 0x54, 0x5c, 0xe1, 0xfd, 0xac, 0x35, 0xfa,
    0x16, 0xc2, 0xd5, 0xf2, 0x5a, 0xbe, 0x7c, 0x31,
    0x16, 0x8e, 0xbd, 0xdb, 0xfe, 0x4d, 0x03, 0x6f,
    0x16, 0x5e, 0xa6, 0x1f, 0x23, 0x2d, 0xca, 0x68,
    0x16, 0xf0, 0xc6, 0x14, 0xcc, 0xc3, 0x3e, 0xf0,
    0x16, 0x21, 0xd4, 0x40, 0x2a, 0x72, 0xb6, 0x7e,
    0x16, 0xe2, 0x85, 0xd6, 0x8a, 0xfb, 0x48, 0x51,
    0x16, 0x27, 0x77, 0xe4, 0xcb, 0xcd, 0x2f, 0xf6,
    0x16, 0xe1, 0xbc, 0xfe, 0xed, 0xa1, 0x14, 0x5f,
    0x16, 0xe5, 0x32, 0xfc, 0xcf, 0xd9, 0xfb, 0x2f,
    0x16, 0xe9, 0xad, 0x7d, 0x2d, 0x68, 0xe7, 0x9a,
    0x16, 0x15, 0x95, 0x6a, 0x4a, 0xe4, 0xab, 0xe4,
    0x16, 0xeb, 0xe0, 0x0d, 0x40, 0xbd, 0xef, 0x8f,
    0x16, 0xb9, 0x75, 0xb4, 0x39, 0x08, 0x6d, 0xc0,
    0x16, 0x9f, 0x04, 0xff, 0xcc, 0xde, 0x13, 0x30,
    0x16, 0x4e, 0xb6, 0xe4, 0xe0, 0xcb, 0x69, 0xe5,
    0x16, 0xc6, 0x1c, 0x2f, 0x43, 0x6a, 0x63, 0x25,
    0x16, 0x72, 0xd5, 0xdf, 0xbd, 0xdc, 0x0b, 0xe9,
    0x16, 0x08, 0x9d, 0x3d, 0x26, 0x6f, 0xc3, 0x89,
    0x16, 0xf8, 0x18, 0xac, 0x42, 0xbf, 0x4e, 0x9d,
    0x16, 0x5d, 0x28, 0xb0, 0x26, 0x41, 0x36, 0x76,
    0x16, 0x8d, 0x86, 0x84, 0xfa, 0xd8, 0xd4, 0x67,
    0x16, 0x58, 0x19, 0x69, 0x20, 0x2d, 0x35, 0xfe,
    0x16, 0x09, 0xd9, 0x8c, 0xfd, 0xf9, 0x21, 0xa1,
    0x16, 0x57, 0xdf, 0x17, 0xae, 0x8e, 0xcb, 0xc9,
    0x16, 0x7f, 0x26, 0x54, 0xde, 0x10, 0x43, 0x72,
    0x16, 0xdd, 0xbc, 0x18, 0xb9, 0x34, 0xf9, 0xab,
    0x16, 0x70, 0xf9, 0x74, 0x4d, 0x8e, 0x6d, 0x2a,
    0x16, 0x33, 0x14, 0x06, 0xd0, 0x71, 0xe6, 0xad,
    0x16, 0xaa, 0xbe, 0x86, 0x2e, 0x9a, 0x8d, 0x87,
    0x16, 0x88, 0xaf, 0x03, 0x9f, 0xcb, 0xf8, 0x78,
    0x16, 0x9a, 0x66, 0x38, 0x09, 0xcd, 0xae, 0x89,
    0x16, 0xc2, 0xcc, 0xaf, 0x6a, 0x16, 0x14, 0x09,
    0x16, 0x48, 0xae, 0x9b, 0x55, 0xe4, 0x0f, 0xa5,
    0x16, 0x86, 0xa1, 0x75, 0x7f, 0x7c, 0xef, 0x0d,
    0x16, 0xcb, 0x3a, 0xb3, 0x0d, 0x1f, 0x02, 0x00,
    0x15, 0x00, 0x00, 0x0c, 0x80, 0x1f, 0xb4, 0xf4,
    0x16, 0xe0, 0xa6, 0x41, 0xcc, 0x87, 0x00, 0x40,
    0x16, 0x61, 0x43, 0xe7, 0xfc, 0xb4, 0x00, 0x00,
    0x15, 0x00, 0x01, 0x24, 0xca, 0x45, 0x34, 0x25,
    0x16, 0x3c, 0x39, 0xff, 0x09, 0x8c, 0x39, 0x85,
    0x16, 0x5a, 0x5b, 0xcc, 0x27, 0x3c, 0xbd, 0x28,
    0x16, 0x43, 0x86, 0x45, 0x17, 0x9a, 0x4e, 0x35,
    0x16, 0x24, 0xa4, 0x23, 0xa2, 0xfd, 0xca, 0x6c,
    0x16, 0xd4, 0xfb, 0xba, 0xe7, 0x41, 0xb3, 0xfb,
    0x16, 0x7c, 0x55, 0x07, 0xb5, 0x6e, 0x3e, 0xb1,
    0x16, 0x29, 0x72, 0xcc, 0x38, 0xea, 0x27, 0x30,
    0x16, 0x80, 0xb9, 0x8c, 0xb8, 0xee, 0x54, 0xab,
    0x16, 0x3e, 0xdb, 0xdd, 0x06, 0xd0, 0x95, 0xea,
    0x16, 0x3e, 0x42, 0x88, 0x6b, 0xae, 0x89, 0xc7,
    0x16, 0xe8, 0x4c, 0x38, 0xb6, 0x93, 0xf6, 0xbe,
    0x16, 0x4c, 0x20, 0x4a, 0x8c, 0xce, 0x2b, 0x22,
    0x16, 0xd2, 0x72, 0x49, 0x46, 0x18, 0x56, 0x80,
    0x16, 0x70, 0x67, 0x5a, 0xfa, 0xc0, 0xca, 0x6d,
    0x16, 0x53, 0x21, 0xca, 0xe3, 0x86, 0x68, 0x91,
    0x16, 0xd3, 0x7c, 0xa9, 0xd5, 0xad, 0x6a, 0x72,
    0x16, 0xa1, 0xfe, 0x53, 0xe9, 0x40, 0x85, 0xea,
    0x16, 0x62, 0xa9, 0x63, 0x75, 0x3a, 0x2d, 0xec,
    0x16, 0x9b, 0xfe, 0x58, 0xd8, 0x73, 0x20, 0x52,
    0x16, 0x10, 0x43, 0x5c, 0x2d, 0xb4, 0x21, 0xb9,
    0x16, 0x96, 0x1f, 0x72, 0x6d, 0xba, 0x42, 0xea,
    0x16, 0xf2, 0x85, 0xbe, 0x52, 0x12, 0xa7, 0xb1,
    0x16, 0x3e, 0x2b, 0x89, 0xef, 0x0f, 0x73, 0x05,
    0x16, 0x7c, 0x99, 0xc3, 0xc5, 0x5f, 0x96, 0x53,
    0x16, 0xf8, 0xaf, 0x9b, 0x7a, 0x49, 0xa0, 0x44,
    0x16, 0x54, 0x60, 0x55, 0xf0, 0x10, 0x3a, 0x60,
    0x16, 0x8d, 0x90, 0x50, 0x65, 0xae, 0xf7, 0x79,
    0x16, 0xdb, 0x2e, 0x08, 0xf9, 0xbb, 0xf2, 0xd2,
    0x16, 0x78, 0xd0, 0x86, 0xb5, 0x94, 0xa1, 0x0e,
    0x16, 0xb9, 0x81, 0x89, 0xb7, 0xf9, 0xc0, 0x43,
    0x16, 0xe8, 0x8f, 0x38, 0x19, 0xda, 0xed, 0x2f,
    0x16, 0xa7, 0x5c, 0xdb, 0x01, 0xb3, 0x38, 0xce,
    0x16, 0xe6, 0xc3, 0xf2, 0xd5, 0xaa, 0x87, 0x9e,
    0x16, 0x11, 0x6f, 0xd8, 0x05, 0xf0, 0x72, 0xab,
    0x16, 0xd9, 0xa1, 0x0f, 0xff, 0x46, 0xe9, 0x4a,
    0x16, 0x8c, 0x00, 0x93, 0xe9, 0x86, 0x6f, 0x6b,
    0x16, 0x14, 0x70, 0xbe, 0xb1, 0xb8, 0x89, 0xc9,
    0x16, 0xcc, 0x7d, 0x1a, 0x11, 0xd2, 0x79, 0xfb,
    0x16, 0xd9, 0xd7, 0x24, 0x13, 0x94, 0x8f, 0x01,
    0x16, 0x9c, 0x4b, 0x69, 0x33, 0x66, 0x01, 0x82,
    0x16, 0x98, 0x88, 0xf8, 0x4c, 0x13, 0x31, 0x0f,
    0x16, 0x58, 0xc1, 0x06, 0x11, 0x30, 0x00, 0x00,
    0x15, 0x00, 0x00, 0xb4, 0x89, 0x91, 0x34, 0x9b,
    0x16, 0x89, 0xfc, 0x75, 0xcd, 0x11, 0xca, 0x1a,
    0x16, 0x6f, 0xfa, 0x71, 0xd6, 0x45, 0xe7, 0x0f,
    0x16, 0xeb, 0x39, 0x09, 0xb3, 0x5a, 0x13, 0x1f,
    0x16, 0xaa, 0x3a, 0x93, 0xcf, 0x8d, 0x6e, 0xca,
    0x16, 0xec, 0x2c, 0x8e, 0xc5, 0x83, 0x1b, 0x5a,
    0x16, 0xd6, 0xd1, 0x89, 0xac, 0x02, 0x4f, 0xcb,
    0x16, 0x0f, 0x25, 0x76, 0x96, 0xe0, 0x5d, 0x2c,
    0x16, 0xff, 0xa7, 0xea, 0xea, 0x92, 0xf1, 0x72,
    0x16, 0x5b, 0xee, 0x08, 0xd8, 0x84, 0x8a, 0xa9,
    0x16, 0x59, 0xe3, 0x12, 0x77, 0xda, 0xd6, 0xca,
    0x16, 0x4e, 0x36, 0x2d, 0x7c, 0xa4, 0x13, 0xd1,
    0x16, 0xe8, 0x18, 0x31, 0x99, 0x02, 0x54, 0x0a,
    0x16, 0xd0, 0x7a, 0x74, 0xa0, 0xad, 0x2c, 0x83,
    0x16, 0x4a, 0x6f, 0xf1, 0xb1, 0x50, 0x1b, 0x64,
    0x16, 0x69, 0xe8, 0x84, 0x2f, 0x2c, 0xc8, 0xeb,
    0x16, 0x95, 0x3d, 0xa5, 0x18, 0xc7, 0x4b, 0x82,
    0x16, 0xfc, 0x88, 0xe1, 0xd3, 0x7b, 0x0e, 0xbe,
    0x16, 0x10, 0xba, 0x65, 0x02, 0x85, 0x9b, 0x46,
    0x16, 0x9a, 0x37, 0x7a, 0x77, 0x4d, 0xc2, 0xc4,
    0x16, 0x53, 0x30, 0x67, 0x91, 0x54, 0xf6, 0x3d,
    0x16, 0x39, 0x44, 0x43, 0x42, 0x13, 0x2e, 0x09,
    0x16, 0x29, 0xfd, 0x50, 0xa6, 0xda, 0x94, 0xce,
    0x16, 0x86, 0x97, 0x10, 0x2b, 0x5c, 0x1c, 0x09,
    0x16, 0xcd, 0x0f, 0xfc, 0x15, 0xdc, 0x54, 0x3b,
    0x16, 0x53, 0xe1, 0x7c, 0xa7, 0xe1, 0xfd, 0x47,
    0x16, 0xc2, 0xaf, 0x7e, 0xea, 0x34, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x0c, 0x6f, 0xe6, 0x5c, 0x04,
    0x16, 0x30, 0x6c, 0x84, 0xc7, 0x51, 0xe3, 0xb5,
    0x16, 0x5f, 0x34, 0x9e, 0xdd, 0x05, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x0c, 0x1c, 0xd4, 0xbc, 0xfb,
    0x16, 0xcd, 0x3a, 0xae, 0xbc, 0x52, 0x92, 0x54,
    0x16, 0x85, 0x2c, 0xed, 0x0f, 0xfb, 0x00, 0x00,
    0x15, 0x00, 0x00, 0xf8, 0x73, 0x10, 0x5d, 0xd8,
    0x16, 0x1f, 0x06, 0xe0, 0xa1, 0x59, 0x26, 0xb4,
    0x16, 0x39, 0x3f, 0xc1, 0x19, 0xf9, 0xd4, 0xbe,
    0x16, 0x4f, 0xf4, 0x33, 0xec, 0x3f, 0x3f, 0xfe,
    0x16, 0x8f, 0x91, 0xd0, 0x44, 0xf2, 0x12, 0x78,
    0x16, 0x90, 0x9e, 0x79, 0xa9, 0x27, 0xee, 0x05,
    0x16, 0xcb, 0x9f, 0x5a, 0x4b, 0x15, 0xde, 0x67,
    0x16, 0x39, 0x18, 0x1f, 0xe7, 0x3a, 0x0a, 0x41,
    0x16, 0x98, 0xe7, 0xde, 0xa7, 0x28, 0xa0, 0xd3,
    0x16, 0x54, 0x66, 0x33, 0x79, 0xb5, 0x3a, 0x83,
    0x16, 0x37, 0x5f, 0x25, 0x40, 0x70, 0x47, 0xb8,
    0x16, 0x79, 0x6b, 0x62, 0x96, 0x3f, 0x48, 0xea,
    0x16, 0x9f, 0x6e, 0xcb, 0x35, 0xe1, 0x6f, 0x2d,
    0x16, 0xc4, 0xc2, 0x4b, 0x9b, 0xa7, 0x4d, 0x05,
    0x16, 0x79, 0x0e, 0x1c, 0xfe, 0x09, 0x5a, 0x9f,
    0x16, 0x87, 0x22, 0x7a, 0x13, 0x1b, 0x9f, 0x99,
    0x16, 0x4d, 0x05, 0xdb, 0x15, 0x73, 0xd8, 0x65,
    0x16, 0xfe, 0x39, 0x5e, 0xa4, 0x43, 0x7b, 0x6c,
    0x16, 0x79, 0xbd, 0x73, 0x91, 0x4c, 0x9b, 0x4c,
    0x16, 0x94, 0x18, 0x87, 0xea, 0x68, 0xa7, 0x44,
    0x16, 0x9f, 0x5c, 0x36, 0x66, 0xfd, 0x41, 0x14,
    0x16, 0x5e, 0xb1, 0x8e, 0xeb, 0x45, 0xda, 0x77,
    0x16, 0x0e, 0xe0, 0xec, 0x5e, 0xf4, 0x0d, 0xbf,
    0x16, 0x41, 0xc6, 0x48, 0xf0, 0x15, 0xd8, 0x60,
    0x16, 0xf7, 0x40, 0x76, 0x23, 0x7b, 0x1c, 0xe5,
    0x16, 0x59, 0x44, 0x50, 0x30, 0xce, 0x06, 0x4e,
    0x16, 0xc5, 0xa6, 0x70, 0xc3, 0x18, 0x17, 0xa2,
    0x16, 0x37, 0xac, 0xbf, 0x2c, 0x6f, 0xbc, 0x9b,
    0x16, 0x3f, 0x58, 0x12, 0x11, 0x10, 0x39, 0x00,
    0x16, 0x18, 0xdb, 0x7d, 0x0b, 0xd2, 0x2c, 0xee,
    0x16, 0x0a, 0xaf, 0x76, 0x94, 0x7a, 0xc1, 0x5c,
    0x16, 0x21, 0xd2, 0x61, 0x9f, 0x1d, 0x7a, 0x96,
    0x16, 0x95, 0xdf, 0xa4, 0x51, 0x81, 0xe6, 0x1b,
    0x16, 0xd5, 0x7c, 0x36, 0x44, 0xf0, 0x60, 0xff,
    0x16, 0x3a, 0xf6, 0x32, 0xec, 0x8f, 0xe0, 0x9a,
    0x16, 0xc7, 0xe3, 0xbc, 0xad, 0xeb, 0xa6, 0x94,
    0x16, 0x71, 0x4b, 0x6d, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x38, 0x97, 0x4c, 0x36, 0xa2,
    0x16, 0x75, 0xff, 0xfb, 0x3f, 0xeb, 0x60, 0xe1,
    0x16, 0x31, 0xb1, 0xbc, 0x32, 0x77, 0x6c, 0xbd,
    0x16, 0x49, 0x93, 0x4b, 0xc2, 0x07, 0xba, 0xf0,
    0x16, 0x67, 0xfd, 0x68, 0xca, 0xf5, 0xa4, 0xff,
    0x16, 0x2a, 0x5e, 0xe2, 0xbe, 0xb5, 0x69, 0xb2,
    0x16, 0xa0, 0x63, 0x93, 0x1b, 0xb4, 0xbd, 0x46,
    0x16, 0x12, 0xfa, 0xee, 0x88, 0x5f, 0x46, 0xdf,
    0x16, 0xb2, 0xba, 0xe8, 0xba, 0x54, 0x47, 0xea,
    0x15, 0x00, 0x00, 0x18, 0xfa, 0x08, 0x91, 0x77,
    0x16, 0x9b, 0x1c, 0x87, 0x8b, 0x01, 0x70, 0x9e,
    0x16, 0xc0, 0x05, 0x2b, 0xaa, 0xd7, 0xaf, 0x30,
    0x16, 0xa8, 0x01, 0x8b, 0x28, 0xa0, 0xf5, 0x95,
    0x16, 0x99, 0x32, 0x5f, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0xc4, 0xef, 0x65, 0x45,
    0x16, 0x3c, 0xc3, 0x6d, 0xef, 0xb8, 0x34, 0x9d,
    0x16, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0x66, 0x86, 0xf2, 0xbc,
    0x16, 0x9d, 0x87, 0x97, 0xbe, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0xdd, 0x58, 0xdd, 0x53,
    0x16, 0x0f, 0x7d, 0xec, 0x93, 0x0b, 0xb9, 0x5b,
    0x16, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0x76, 0x15, 0xdf, 0xc7,
    0x16, 0x68, 0x2f, 0xa8, 0xf8, 0x4d, 0x33, 0x8f,
    0x16, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x08, 0x84, 0xc3, 0xe8, 0xcb,
    0x16, 0x9c, 0x71, 0x80, 0x09, 0xd7, 0x11, 0x63,
    0x16, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x04, 0x0e, 0xc6, 0xf0, 0x50,
    0x16, 0x9e, 0x0a, 0xa7, 0x99, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x14, 0x9a, 0x5a, 0xf9, 0xaa,
    0x16, 0x5f, 0x06, 0xdf, 0x5c, 0x52, 0x37, 0x4b,
    0x16, 0x39, 0x0c, 0x7e, 0x18, 0xc1, 0xab, 0xd6,
    0x16, 0x36, 0xf5, 0x78, 0xbd, 0x9f, 0x79, 0x00,
    0x15, 0x00, 0x00, 0x0e, 0xf2, 0x33, 0x61, 0x0e,
    0x16, 0xc3, 0x0b, 0x5a, 0x24, 0x02, 0x3f, 0x42,
    0x16, 0x35, 0x3d, 0xa4, 0xad, 0xc5, 0x30, 0x50,
    0x15, 0x00, 0x00, 0x76, 0xe7, 0xe3, 0x45, 0x08,
    0x16, 0x66, 0x18, 0x21, 0xeb, 0xdd, 0x14, 0x76,
    0x16, 0xf8, 0xf1, 0x55, 0xe8, 0x3b, 0x9d, 0x8b,
    0x16, 0x93, 0x92, 0xff, 0xa7, 0x80, 0x34, 0x38,
    0x16, 0xc2, 0xad, 0x7c, 0xff, 0xbd, 0x23, 0x2b,
    0x16, 0x0b, 0x2c, 0x5f, 0xea, 0xc0, 0x95, 0x00,
    0x16, 0xfb, 0x8c, 0x37, 0x6b, 0x8a, 0x42, 0x91,
    0x16, 0x3e, 0xef, 0xd6, 0x51, 0x43, 0x21, 0x6f,
    0x16, 0x80, 0x3e, 0xbd, 0xf2, 0xb3, 0x24, 0x07,
    0x16, 0xa5, 0x92, 0x4a, 0x76, 0x51, 0x31, 0x72,
    0x16, 0x35, 0x47, 0x25, 0xe7, 0xb9, 0xd0, 0xf4,
    0x16, 0xc2, 0xdd, 0x52, 0x35, 0x3a, 0x23, 0xc4,
    0x16, 0x16, 0xfa, 0x2a, 0x8d, 0x99, 0xd0, 0xb9,
    0x16, 0x53, 0xc2, 0x12, 0x5c, 0x3f, 0xce, 0x8d,
    0x16, 0xdb, 0xd1, 0xc8, 0xd1, 0x59, 0xe5, 0x88,
    0x16, 0xff, 0x49, 0x11, 0xab, 0xab, 0x7b, 0xd1,
    0x16, 0xf2, 0xb4, 0x37, 0x49, 0xa0, 0xb1, 0xfe,
    0x16, 0xfe, 0x6c, 0x08, 0x76, 0x1d, 0x0b, 0x00,
    0x15, 0x00, 0x00, 0x9a, 0xf4, 0xb1, 0x6d, 0xa0,
    0x16, 0xf2, 0x20, 0xe4, 0x17, 0xa7, 0x4d, 0x85,
    0x16, 0xb3, 0x8e, 0x7a, 0xcb, 0x87, 0x30, 0xaf,
    0x16, 0x11, 0x90, 0x20, 0xa8, 0x19, 0xea, 0x22,
    0x16, 0x07, 0xfa, 0xc1, 0x4c, 0xe8, 0xfc, 0xa2,
    0x16, 0x03, 0x8f, 0x2a, 0xc5, 0x36, 0xe4, 0xaf,
    0x16, 0x66, 0x9b, 0xba, 0x0a, 0xdd, 0x65, 0x90,
    0x16, 0xda, 0xd7, 0x27, 0x62, 0xd9, 0x19, 0x3b,
    0x16, 0xab, 0xf6, 0x66, 0x89, 0x2d, 0xa5, 0x30,
    0x16, 0x70, 0xe9, 0xaa, 0xe2, 0xd9, 0xc1, 0x23,
    0x16, 0x47, 0xfd, 0x9a, 0x25, 0x4a, 0x5f, 0x89,
    0x16, 0x62, 0x97, 0x61, 0x4b, 0x91, 0xfc, 0x34,
    0x16, 0x1b, 0xfc, 0x97, 0xb2, 0x7b, 0x87, 0xf4,
    0x16, 0x54, 0xfc, 0xd6, 0x36, 0x48, 0xc2, 0x87,
    0x16, 0x79, 0xa3, 0xc4, 0x8f, 0x42, 0xb1, 0x31,
    0x16, 0x47, 0xdd, 0xe8, 0xd0, 0x0a, 0x71, 0x47,
    0x16, 0x22, 0xf3, 0xf4, 0x9f, 0x28, 0x7a, 0x70,
    0x16, 0x0c, 0xbc, 0x59, 0x30, 0xe0, 0xe4, 0x13,
    0x16, 0x24, 0x65, 0xbd, 0x4c, 0x0e, 0x6d, 0x9e,
    0x16, 0x4d, 0x15, 0x90, 0x19, 0x72, 0xc9, 0x28,
    0x16, 0xb6, 0x95, 0x0e, 0x92, 0xf9, 0x79, 0x5c,
    0x16, 0x64, 0xb9, 0xb9, 0x7b, 0xd7, 0xdc, 0xb4,
    0x16, 0xb9, 0xb4, 0x96, 0x7f, 0x72, 0x55, 0xae,
    0x15, 0x00, 0x00, 0x1e, 0xb0, 0x02, 0x8e, 0x45,
    0x16, 0xbd, 0xf0, 0xa5, 0x90, 0xb7, 0x30, 0x12,
    0x16, 0x40, 0xb6, 0x40, 0x9c, 0xf1, 0x62, 0x63,
    0x16, 0x72, 0x6d, 0xf0, 0xba, 0x1a, 0xf6, 0xf0,
    0x16, 0x40, 0x6a, 0x47, 0xa2, 0xfc, 0x9b, 0xd8,
    0x16, 0x70, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x1a, 0xf5, 0x24, 0xf6, 0x4d,
    0x16, 0x2f, 0x64, 0xfd, 0xf7, 0xc3, 0xfd, 0xa7,
    0x16, 0x45, 0x5d, 0x94, 0x31, 0x8f, 0xd6, 0x9f,
    0x16, 0x5d, 0x21, 0x66, 0x41, 0xd4, 0x39, 0x51,
    0x16, 0xaf, 0x61, 0x8c, 0x1e, 0x9f, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x06, 0x11, 0xe9, 0x7a, 0x88,
    0x16, 0x31, 0xe1, 0x26, 0xb6, 0x1c, 0x74, 0x00,
    0x15, 0x00, 0x00, 0x06, 0xf5, 0x98, 0x35, 0x17,
    0x16, 0x1a, 0xab, 0x19, 0x3a, 0x8c, 0xc6, 0x00,
    0x15, 0x00, 0x00, 0x0e, 0x7e, 0x14, 0xd0, 0x6e,
    0x16, 0x44, 0x1c, 0x66, 0x61, 0x67, 0xf1, 0x8e,
    0x16, 0x28, 0x72, 0x30, 0xd2, 0xbf, 0x7d, 0x6f,
    0x15, 0x00, 0x00, 0x08, 0x17, 0x99, 0x62, 0xee,
    0x16, 0x78, 0x18, 0x54, 0x3a, 0xd5, 0x7f, 0x61,
    0x16, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x10, 0x83, 0x3e, 0x2c, 0x92,
    0x16, 0x4f, 0x5a, 0x98, 0x59, 0x97, 0xfb, 0x82,
    0x16, 0x97, 0xad, 0xc8, 0x73, 0xa2, 0x6c, 0x0d,
    0x16, 0x06, 0xcf, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x0a, 0x69, 0xda, 0xeb, 0x9e,
    0x16, 0xf7, 0x67, 0x7f, 0xde, 0xe8, 0x83, 0x0b,
    0x16, 0x46, 0x5a, 0x3f, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x02, 0xb3, 0x60, 0x7f, 0xdc,
    0x16, 0xa3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x14, 0x8e, 0xcf, 0xa2, 0x65,
    0x16, 0x72, 0xce, 0x3e, 0x11, 0x39, 0x2d, 0x94,
    0x16, 0x94, 0x47, 0x8e, 0xc7, 0x8c, 0x70, 0x6b,
    0x16, 0x7c, 0x49, 0x8e, 0x3c, 0xd7, 0x4c, 0x00,
    0x15, 0x00, 0x00, 0x02, 0xc8, 0x77, 0xa5, 0xfd,
    0x16, 0xba, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x0a, 0x1a, 0x1b, 0xd9, 0x4a,
    0x16, 0x83, 0x03, 0xdf, 0xe2, 0x75, 0x6e, 0x28,
    0x16, 0xd9, 0x63, 0x1f, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x02, 0x18, 0x27, 0x27, 0x8f,
    0x16, 0x4b, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x02
]


##################
# SRT Fagci Reborn
##################

CHAN_MAX = 8
#READ_WRITE_CHANNELS = CHAN_MAX  # This val should be; CHAN_MAX For debbunging purposes,
# this value can be changed to 10 for faster testing (? STILL TRUE??)

SETTINGS_SIZE = 22 #0x001b

PATCH_SIZE = len(RAW_PATCH_DATA)
PATCH_BLOCKS = PATCH_SIZE // 8

CH_SIZE = 39

EEPROM_SIZES = [
    8192,  
    16384, 
    32768, 
    65536, 
    131072,
    262144,
]

# Channel types
TYPE_EMPTY = 0
TYPE_CH = 1
TYPE_BAND = 2
TYPE_VFO =3 
TYPE_FOLDER = 4
TYPE_MELODY = 5
TYPE_SETTING = 6
TYPE_FILE = 7


RADIO_LIST = [
    "BK4819",
    "BK1080",
    "SI4732",
    "Preset",
]

BANDWIDTH_LIST = [
    "U6K", 
    "U7K", 
    "N9k", 
    "N10k",
    "W12k",
    "W14k",
    "W17k",
    "W20k",
    "W23k",
    "W26k",
]

MODULATION_LIST = ["FM", "AM", "LSB", "USB",
                   "BYP", "RAW", "WFM", "Preset"]

MODULATION_LIST_MAP = ["FM", "AM", "LSB", "USB",
                       "DV", "CW", "WFM", "Auto"]

STEP_NAMES = [
    "0.02kHz",
    "0.05kHz",
    "0.5kHz",
    "1.0kHz",
    "2.5kHz",
    "5.0kHz",
    "6.25kHz",
    "8.33kHz",
    "9.0kHz",
    "10.0kHz",
    "12.5kHz",
    "25.0kHz",
    "50.0kHz",
    "100.0kHz",
    "500.0kHz"
]

OFFSET_DIRECTION = [
    "NONE",
    "+",
    "-",
    "F"
]

BACKLIGHT_ON_SQUELCH_MODE = [
    "BL_SQL_OFF",
    "BL_SQL_ON",
    "BL_SQL_OPEN"
]

BATTERY_TYPE = [
    "BAT_1600",
    "BAT_2200",
    "BAT_3500"
]

BATTERY_STYLE = [
    "BAT_CLEAN",
    "BAT_PERCENT",
    "BAT_VOLTAGE"
]

TX_OUTPUT_POWER = [
    "TX_POW_ULOW",
    "TX_POW_LOW",
    "TX_POW_MID",
    "TX_POW_HIGH"
]

RADIO = [
    "RADIO_BK4819",
    "RADIO_BK1080",
    "RADIO_SI4732",
]

SCAN_TIMEOUT = [
    "0",
    "500ms",
    "1s",
    "3s",
    "5s",
    "10s",
    "30s",
    "1min",
    "2min",
    "5min",
    "NONE"
]

EEPROM_TYPE = [
    "EEPROM_A",
    "EEPROM_B",
    "EEPROM_BL24C64",
    "EEPROM_BL24C128",
    "EEPROM_BL24C256",
    "EEPROM_BL24C512",
    "EEPROM_BL24C1024",
    "EEPROM_M24M02"
]

BL_TIME_VALUES = [0, 5, 10, 20, 60, 120, 255]
BL_TIME_NAMES = ["Off", "5s", "10s", "20s", "1min", "2min", "On"]
BL_TIME_MAP = list(zip(BL_TIME_NAMES, BL_TIME_VALUES))

BL_SQL_MODE_NAMES = ["Off", "On", "Open"]
TX_POWER_NAMES = ["ULow", "Low", "Mid", "High"]
TX_OFFSET_NAMES = ["Unset", "+", "-"]

TX_CODE_TYPES = RX_CODE_TYPES = ["None", "CTCSS", "DCS", "-DCS"]

EEPROM_TYPE_NAMES = [
    "BL24C64 (stock)",
    "BL24C128",
    "BL24C256",
    "BL24C512",
    "BL24C1024",
    "M24M02 (x1)",
]

APP_LIST = [
    "None",
    "EEPROM view",
    "Spectrum band",
    "Spectrum analyzer",
    "Channels",
    "1 VFO pro",
    "Frequency input",
    "Run app",
    "Loot",
    "Presets",
    "Reset",
    "Text input",
    "VFO config",
    "Preset config",
    "Settings",
    "1 VFO",
    "2 VFO",
    "ABOUT"
]

BATTERY_TYPE_NAMES = ["1600mAh", "2200mAh", "3500mAh"]
BATTERY_STYLE_NAMES = ["Plain", "Percent", "Voltage"]

SCAN_TIMEOUT_NAMES = [
    "0", "100ms", "200ms", "300ms", "400ms", "500ms", "1s", "3s", "5s", "10s",
    "30s", "1min", "2min", "5min", "None"
]

BOUND_240_280_NAMES = ["Bound 240", "Bound 280"]
VFOs = ["VFO A", "VFO B"]

SQUELCH_TYPE_LIST = ["RNG", "RG", "RN", "R"]

SQL_CLOSE_NAMES = [f"{i}ms" for i in range(0, 15, 5)]

SQL_OPEN_NAMES = [f"{i}ms" for i in range(0, 35, 5)]

# power
UVK5_POWER_LEVELS = [chirp_common.PowerLevel("ULow", watts=0.01),
                     chirp_common.PowerLevel("Low", watts=0.50),
                     chirp_common.PowerLevel("Med", watts=2.00),
                     chirp_common.PowerLevel("High", watts=5.00)]

TMODES = [None, "Tone", "DTCS", "DTCS"]
ROGER_NAMES = ["None", "Moto", "Tiny", "Call"]

CTCSS_TONES = [
    67.0, 69.3, 71.9, 74.4, 77.0, 79.7, 82.5, 85.4,
    88.5, 91.5, 94.8, 97.4, 100.0, 103.5, 107.2, 110.9,
    114.8, 118.8, 123.0, 127.3, 131.8, 136.5, 141.3, 146.2,
    151.4, 156.7, 159.8, 162.2, 165.5, 167.9, 171.3, 173.8,
    177.3, 179.9, 183.5, 186.2, 189.9, 192.8, 196.6, 199.5,
    203.5, 206.5, 210.7, 218.1, 225.7, 229.1, 233.6, 241.8,
    250.3, 254.1,
]

CTCSS_TONES_NAMES = list(map(str, CTCSS_TONES))

DTCS_CODES = [
    23, 25, 26, 31, 32, 36, 43, 47, 51, 53, 54,
    65, 71, 72, 73, 74, 114, 115, 116, 122, 125, 131,
    132, 134, 143, 145, 152, 155, 156, 162, 165, 172, 174,
    205, 212, 223, 225, 226, 243, 244, 245, 246, 251, 252,
    255, 261, 263, 265, 266, 271, 274, 306, 311, 315, 325,
    331, 332, 343, 346, 351, 356, 364, 365, 371, 411, 412,
    413, 423, 431, 432, 445, 446, 452, 454, 455, 462, 464,
    465, 466, 503, 506, 516, 523, 526, 532, 546, 565, 606,
    612, 624, 627, 631, 632, 654, 662, 664, 703, 712, 723,
    731, 732, 734, 743, 754
]

DTCS_CODES_NAMES = list(map(str, DTCS_CODES))

TXPOWER_LIST = ["ULow", "Low", "Mid", "High"]

MIN_FREQ = 153000
MAX_FREQ = 1399999990

SETTINGS_VF0_PRESET_SIZE = SETTINGS_SIZE
MEMORY_START_LOWER_LIMIT = SETTINGS_SIZE

BIT_MASK_NAMES = ["----------------"]

# Generate elements from "1--------" to "-------8"
for i in range(1, 17):
    BIT_MASK_NAMES.append('-' * (i - 1) + str(i) + '-' * (16 - i))

# Append additional elements
BIT_MASK_NAMES.append("All")

BIT_MASK_NAMES.append("Custom")

SSB_PATCHES = ["None", "SSB V1", "Unknown Patch"]

##################
# END Fagci Reborn
##################

READ_SMALL_OFFSET = False

##################
# SRT Memory Map
##################

MEM_SETTINGS = """
struct {
  ul32
    checkbyte : 5,
    upconverter : 27;

  ul16 currentScanlist:16;
  u8 mainApp;

  u16 contrast : 4,
    batteryCalibration: 12;

  u8
    reserved4 : 4,
    backlight : 4;

  u8 
    batsave : 4,
    reserved3 : 4;

  u8 
    txTime : 4,
    vox : 4;

  u8
    roger : 2,
    reserved1 : 1,
    iAmPro : 1,
    micGain  : 4;

  u8
    keylock : 1,
    beep : 1,
    reserved2 : 1,
    pttLock : 1,
    chDisplayMode : 2,
    scanmode : 2;

  u8
    brightness : 4,
    dtmfdecode : 1,
    repeaterSte : 1,
    ste : 1,
    busyChannelTxLock : 1;

  u8
    bound_240_280 : 1,
    eepromType : 3,
    brightnessLow : 4;

  u8
    sqOpenedTimeout : 4,
    sqClosedTimeout : 4;

  u8 
    dw : 2,
    si4732PowerOff: 1,
    noListen : 1,
    batteryStyle : 2,
    batteryType : 2;

  u8 scanTimeout;

  u8
    sqlCloseTime : 2,
    sqlOpenTime : 3,
    toneLocal : 1,
    backlightOnSquelch : 2;

  u8 deviation : 8;
  u8
    unused: 5,
    skipGarbageFrequencies : 1,
    activeVFO : 2;
} Settings;
"""

MEM_CH = """struct {
  struct {
    u8 
      unused:3,
      readonly : 1,
      type : 4;
  } meta;
ul16 scanlists;
  char name[10];
  ul32 unused1:5, rxF: 27;
  ul32 
      unused2:3,
      offsetDir: 2,
      txF: 27;

  u8 step: 4,
  modulation: 4;

  u8 bw: 4,
    radio: 2,
    power: 2;

  u8 allowTx:1,
    scrambler: 4;

  struct {
    u8 value : 4,
      type: 2;
  } squelch;

  struct {
    struct {
      u8 value : 8;
      u8 type : 4;
    } rx;
    struct {
      u8 value : 8;
      u8 type : 4;
    } tx;
  } code;
  u8 fixedBoundsMode : 1;

  u8 gainIndex : 5;
} CH[""" + f"{CHAN_MAX}" + "];\n"


##  NOTE 
##  THIS SHOULD MATCH WITH MEM_PATCH Object Size
PATCH_BLOCK_SIZE, SINGLE_PATCH_VAL = 4, 0xffffffff # patch_data = ul32
#PATCH_BLOCK_SIZE, SINGLE_PATCH_VAL = 2, 0xffff # patch_data = ul16
#PATCH_BLOCK_SIZE, SINGLE_PATCH_VAL = 1, 0xff # patch_data = ul8

PATCH_DATA_BLOCKS_IN_PATCH_BLOCK = int(PATCH_SIZE / PATCH_BLOCKS / PATCH_BLOCK_SIZE)

MEM_PATCH = """struct {
  u32 patch_data[""" + f"{PATCH_DATA_BLOCKS_IN_PATCH_BLOCK}" + """];
} Patch[""" + f"{PATCH_BLOCKS}" + """];
"""

PATCH_DATA_BLOCK_SIZE = int(PATCH_SIZE / PATCH_BLOCKS)

MEM_FORMAT = MEM_SETTINGS

##################
# END Memory Map
##################

ERROR_TIP = ("\n\nPlease ensure that the radio is **NOT** tuned to a frequency that is receiving a signal,"
             " as this can interrupt the upload / download process.\n\nCheck the cable is connected to the radio and"
             " try again. If everything is ok, just try again, sometimes it requires a few tries")

def empty_patch():
    a = {"Patch": []}
    for _ in (range(PATCH_BLOCKS)):
        b = {"patch_data" : []}
        for _ in range(PATCH_DATA_BLOCKS_IN_PATCH_BLOCK):
            b["patch_data"].append(SINGLE_PATCH_VAL)
        a["Patch"].append(b)
    return a
    #return {"Patch": [{"patch_data": [SINGLE_PATCH_VAL] * PATCH_DATA_BLOCKS_IN_PATCH_BLOCK}] * PATCH_BLOCKS}

def transform_to_8bit(num):
    # Initialize an empty list to store the 8-bit integers
    uint8_list = []

    # Loop through each integer in the input list
    for i in range(PATCH_BLOCK_SIZE):
        shift_amount = (PATCH_BLOCK_SIZE - 1 - i) * 8
        uint8_list.append((num >> shift_amount) & 0xFF)

    return uint8_list

def copy_patch(src, dest):
    for i in range(len(src["Patch"])):
        for j in range(len(src["Patch"][i]["patch_data"])):
            patch_block = transform_to_8bit(src["Patch"][i]["patch_data"][j])
            curr_patch_data_block_val = 0
            for k in range(PATCH_BLOCK_SIZE):
                curr_patch_data_block_val |= patch_block[k] << (8 * (PATCH_BLOCK_SIZE - k - 1))
            dest["Patch"][i]["patch_data"][j] = curr_patch_data_block_val

def assign_patch(dest):
    for i in range(len(dest["Patch"])):
        for j in range(len(dest["Patch"][i]["patch_data"])):
            curr_patch_data_ptr = i * PATCH_DATA_BLOCK_SIZE + j * PATCH_BLOCK_SIZE
            curr_patch_data_block_val = 0
            for k in range(PATCH_BLOCK_SIZE):
                curr_patch_data_block_val |= RAW_PATCH_DATA[curr_patch_data_ptr + k] << (8 * (PATCH_BLOCK_SIZE - k - 1))
            # LOG.debug("i=%d, j=%d, p=%d, v=%x" % (i,j,curr_patch_data_ptr,curr_patch_data_block_val))
            dest["Patch"][i]["patch_data"][j] = curr_patch_data_block_val

EMPTY_PATCH_VALUE = empty_patch()
OLD_PATCH_VALUE =  empty_patch()
SSB_V1_PATCH_DATA_VALUE =  empty_patch()
assign_patch(SSB_V1_PATCH_DATA_VALUE)
LOG.debug( SSB_V1_PATCH_DATA_VALUE)
USER_SELECTION_PATCH = {
    "Clear": False,
    "Update" : False
}

def sanitize_str(val):
    """)
    Sanitize the nickname to ensure it contains only allowed characters.
    """
    sanitized_name = re.sub(ALLOWED_CHARS_PATTERN, '', str(val)).strip("\x00\xff\x20") + "\x00"
    return sanitized_name


# function to get only first 9 chars of a string and set the 10th char to string terminator
def sanitize_str_10(val):
    """
     Get only the first 9 characters of a string and set the 10th character to string terminator.
     """
    return val[:9] + '\x00'


def min_max_def(value, min_val, max_val, default):
    """returns value if in bounds or default otherwise"""
    if min_val is not None and value < min_val:
        return default
    if max_val is not None and value > max_val:
        return default
    return value


# --------------------------------------------------------------------------------
# nibble to ascii
def hexasc(data):
    res = data
    if res <= 9:
        return chr(res + 48)
    elif data == 0xA:
        return "A"
    elif data == 0xB:
        return "B"
    elif data == 0xC:
        return "C"
    elif data == 0xD:
        return "D"
    elif data == 0xF:
        return "F"
    else:
        return " "


# --------------------------------------------------------------------------------
# nibble to ascii
def ascdec(data):
    if data == "0":
        return 0
    elif data == "1":
        return 1
    elif data == "2":
        return 2
    elif data == "3":
        return 3
    elif data == "4":
        return 4
    elif data == "5":
        return 5
    elif data == "6":
        return 6
    elif data == "7":
        return 7
    elif data == "8":
        return 8
    elif data == "9":
        return 9
    elif data == "A":
        return 10
    elif data == "B":
        return 11
    elif data == "C":
        return 12
    elif data == "D":
        return 13
    elif data == "F":
        return 15
    else:
        return 14


# --------------------------------------------------------------------------------
# the communication is obfuscated using this fine mechanism
def xorarr(data: bytes):
    tbl = [22, 108, 20, 230, 46, 145, 13, 64, 33, 53, 213, 64, 19, 3, 233, 128]
    x = b""
    r = 0
    for byte in data:
        x += bytes([byte ^ tbl[r]])
        r = (r + 1) % len(tbl)
    return x


# --------------------------------------------------------------------------------
# if this crc was used for communication to AND from the radio, then it
# would be a measure to increase reliability.
# but it's only used towards the radio, so it's for further obfuscation
def calculate_crc16_xmodem(data: bytes):
    poly = 0x1021
    crc = 0x0
    for byte in data:
        crc = crc ^ (byte << 8)
        for i in range(8):
            crc = crc << 1
            if (crc & 0x10000):
                crc = (crc ^ poly) & 0xFFFF
    return crc & 0xFFFF


# --------------------------------------------------------------------------------
def _send_command(serport, data: bytes):
    """Send a command to UV-K5 radio"""
    LOG.debug("Sending command (unobfuscated) len=0x%4.4x:\n%s" %
              (len(data), util.hexprint(data)))

    crc = calculate_crc16_xmodem(data)
    data2 = data + struct.pack("<H", crc)

    command = struct.pack(">HBB", 0xabcd, len(data), 0) + \
              xorarr(data2) + \
              struct.pack(">H", 0xdcba)
    if DEBUG_SHOW_OBFUSCATED_COMMANDS:
        LOG.debug("Sending command (obfuscated):\n%s" % util.hexprint(command))
    try:
        result = serport.write(command)
    except Exception:
        raise errors.RadioError("Error writing data to radio{}".format(ERROR_TIP))
    return result


# --------------------------------------------------------------------------------
def _receive_reply(serport):
    header = serport.read(4)
    if len(header) != 4:
        LOG.warning("Header short read: [%s] len=%i" %
                    (util.hexprint(header), len(header)))
        b = serport.read(400)
        LOG.warning("res: \n\n%s\n\n len=%i" % (util.hexprint(b), len(b)))
        raise errors.RadioError("Header short read{}".format(ERROR_TIP))
    if header[0] != 0xAB or header[1] != 0xCD or header[3] != 0x00:
        b = serport.read(400)
        LOG.warning("res: \n\n%s\n\n len=%i" % (util.hexprint(b), len(b)))
        LOG.warning("Bad response header: %s len=%i" %
                    (util.hexprint(header), len(header)))
        raise errors.RadioError("Bad response header{}".format(ERROR_TIP))

    cmd = serport.read(int(header[2]))
    if len(cmd) != int(header[2]):
        LOG.warning("Body short read: [%s] len=%i" %
                    (util.hexprint(cmd), len(cmd)))
        raise errors.RadioError("Command body short read{}".format(ERROR_TIP))

    footer = serport.read(4)

    if len(footer) != 4:
        LOG.warning("Footer short read: [%s] len=%i" %
                    (util.hexprint(footer), len(footer)))
        raise errors.RadioError("Footer short read{}".format(ERROR_TIP))

    if footer[2] != 0xDC or footer[3] != 0xBA:
        LOG.debug(
            "Reply before bad response footer (obfuscated)"
            "len=0x%4.4x:\n%s" % (len(cmd), util.hexprint(cmd)))
        LOG.warning("Bad response footer: %s len=%i" %
                    (util.hexprint(footer), len(footer)))
        raise errors.RadioError("Bad response footer{}".format(ERROR_TIP))

    if DEBUG_SHOW_OBFUSCATED_COMMANDS:
        LOG.debug("Received reply (obfuscated) len=0x%4.4x:\n%s" %
                  (len(cmd), util.hexprint(cmd)))

    cmd2 = xorarr(cmd)

    LOG.debug("Received reply (unobfuscated) len=0x%4.4x:\n%s" %
              (len(cmd2), util.hexprint(cmd2)))

    return cmd2


# --------------------------------------------------------------------------------
def _getstring(data: bytes, begin, maxlen):
    tmplen = min(maxlen + 1, len(data))
    s = [data[i] for i in range(begin, tmplen)]
    for key, val in enumerate(s):
        if val < ord(' ') or val > ord('~'):
            break
    return ''.join(chr(x) for x in s[0:key])


# --------------------------------------------------------------------------------
def _sayhello(serport):
    hellopacket = b"\x14\x05\x04\x00\x6a\x39\x57\x64"

    tries = 5
    while True:
        LOG.debug("Sending hello packet")
        _send_command(serport, hellopacket)
        o = _receive_reply(serport)
        if (o):
            break
        tries -= 1
        if tries == 0:
            LOG.warning("Failed to initialise radio")
            raise errors.RadioError("Failed to initialize radio{}".format(ERROR_TIP))
    firmware = _getstring(o, 4, 16)
    LOG.info("Found firmware: %s" % firmware)
    return firmware


# --------------------------------------------------------------------------------

def _get_offset(serport, offset, length):
    global OFFSET_SIZE
    if OFFSET_SIZE == 0:
        a = [1]
        while len(a) > 0:
            a = serport.read(512)  # flush the serial port
        readmem = b"\x1b\x05\x08\x00" + \
                  struct.pack("<HBB", 0, MEM_BLOCK, 0) + \
                  b"\x6a\x39\x57\x64"
        _send_command(serport, readmem)
        header = serport.read(4)
        serport.read(512)  # flush the rest of the header
        if len(header) == 4:
            OFFSET_SIZE = 2
            return OFFSET_SIZE
        else:
            readmem = b"\x1b\x05\x0A\x00" + \
                      struct.pack("<IBBBB", 0, MEM_BLOCK, 0, 0, 0) + \
                      b"\x6a\x39\x57\x64"
            _send_command(serport, readmem)
            header = serport.read(4)
            serport.read(512)  # flush the rest of the header
            if len(header) == 4:
                OFFSET_SIZE = 4
                return OFFSET_SIZE
            else:
                raise errors.RadioError("Unable to determine offset size{}".format(ERROR_TIP))
    else:
        return OFFSET_SIZE


def _readmem(serport, offset, length):
    current_offset = _get_offset(serport, 0, 0)
    LOG.debug("Offset_len: %d" % current_offset)

    if current_offset == 2:
        LOG.debug("Sending readmem offset=0x%8.4x len=0x%4.4x" % (offset, length))
        readmem = b"\x1b\x05\x08\x00" + \
                  struct.pack("<HBB", offset, length, 0) + \
                  b"\x6a\x39\x57\x64"
    else:
        LOG.debug("Sending readmem offset=0x%4.4x len=0x%4.4x" % (offset, length))
        readmem = b"\x1b\x05\x0A\x00" + \
                  struct.pack("<IBBBB", offset, length, 0, 0, 0) + \
                  b"\x6a\x39\x57\x64"
    _send_command(serport, readmem)
    o = _receive_reply(serport)
    if DEBUG_SHOW_MEMORY_ACTIONS:
        LOG.debug("readmem Received data len=0x%4.4x:\n%s" %
                  (len(o), util.hexprint(o)))
    if OFFSET_SIZE == 2:
        return o[8:]
    else:
        return o[12:]


# --------------------------------------------------------------------------------
def _writemem(serport, data, offset):
    current_offset = _get_offset(serport, 0, 0)

    LOG.debug("Sending writemem offset=0x%4.4x len=0x%4.4x" %
              (offset, len(data)))

    if DEBUG_SHOW_MEMORY_ACTIONS:
        LOG.debug("writemem sent data offset=0x%4.4x len=0x%4.4x:\n%s" %
                  (offset, len(data), util.hexprint(data)))

    dlen = len(data)
    if current_offset == 2:
        writemem = b"\x1d\x05" + \
                   struct.pack("<BBHBB", dlen + 10, 0, offset, dlen, 0) + \
                   b"\x6a\x39\x57\x64" + data
    else:
        writemem = b"\x1d\x05" + \
                   struct.pack("<BBIBBBB", dlen + 10, 0, offset, dlen, 0, 0, 1) + \
                   b"\x6a\x39\x57\x64" + data

    _send_command(serport, writemem)
    o = _receive_reply(serport)

    LOG.debug("writemem Received data: %s len=%i" % (util.hexprint(o), len(o)))

    if (o[0] == 0x1e
            and
            o[4] == (offset & 0xff)
            and
            o[5] == (offset >> 8) & 0xff):
        return True
    else:
        LOG.warning("Bad data from writemem")
        raise errors.RadioError("Bad response to writemem{}".format(ERROR_TIP))


# --------------------------------------------------------------------------------
def _resetradio(serport):
    resetpacket = b"\xdd\x05\x00\x00"
    _send_command(serport, resetpacket)


def set_mem_struct_from_settings(memory_size):
    (ch_memory_start, ch_memory_end, has_patch, _) = get_mem_addrs_and_meta(memory_size)
    LOG.debug("Memory start: %d, Memory end: %d, has_patch : %d" % (ch_memory_start, ch_memory_end, has_patch))

    global MEM_FORMAT
    mem_ch_with_offset = f"\n#seekto {hex(max(SETTINGS_VF0_PRESET_SIZE, ch_memory_start))};\n" + MEM_CH
    MEM_FORMAT = MEM_SETTINGS + mem_ch_with_offset

    if has_patch:
        mem_patch = f"\n#seekto {hex(ch_memory_end)};\n" + MEM_PATCH
        MEM_FORMAT = MEM_FORMAT + mem_patch
        LOG.debug("Memory format with patch: %s" % MEM_FORMAT)


def get_mem_addrs_and_meta(memory_size):
    has_patch = False #True
    ch_memory_start = SETTINGS_SIZE #ch_memory_end - (CH_SIZE * CHAN_MAX)
    ch_memory_end = ch_memory_start + CH_SIZE * CHAN_MAX #memory_size - PATCH_SIZE  # Determine IF PATCH_SIZE is needed
    max_channels = (ch_memory_end - ch_memory_start) // CH_SIZE

    LOG.debug("Memory size: %d, Memory start: %d, Memory end: %d, has_patch : %d" %
              (memory_size, ch_memory_start, ch_memory_end, has_patch))

    return ch_memory_start, ch_memory_end, has_patch, max_channels


# ------------------------------READ Eeprom--------------------------------------------------

def map_values(value, left_min, left_max, right_min, right_max):
    # Figure out how 'wide' each range is
    left_span = left_max - left_min
    right_span = right_max - right_min

    # Convert the left range into a 0-1 range (float)
    value_scaled = float(value - left_min) / float(left_span)

    # Convert the 0-1 range into a value in the right range.
    return right_min + (value_scaled * right_span)


def do_download(radio):
    serport = radio.pipe
    serport.timeout = 0.5
    status = chirp_common.Status()
    status.cur = 0
    status.max = SETTINGS_SIZE
    status.msg = "Getting Firmware Version"
    radio.status_fn(status)

    eeprom = b""
    settings = b""
    f = _sayhello(serport)
    if f:
        radio.FIRMWARE_VERSION = f
    else:
        raise errors.RadioError('Unable to determine firmware version')

    sett = 0

    while sett < SETTINGS_SIZE:
        o = _readmem(serport, sett, MEM_BLOCK)
        status.cur = sett
        radio.status_fn(status)

        if o and len(o) == MEM_BLOCK:
            settings += o
            sett += MEM_BLOCK
        else:
            raise errors.RadioError("Memory download incomplete")

    status.msg = "Downloading Settings from radio"
    settings_mmap = memmap.MemoryMapBytes(settings)
    settings_parsed = bitwise.parse(MEM_SETTINGS, settings_mmap)
    eeprom_type = settings_parsed["Settings"]['eepromType']
    memory_size = EEPROM_SIZES[eeprom_type]
    LOG.debug(settings_parsed)

    (ch_memory_start, ch_memory_end, has_patch, max_channels) = get_mem_addrs_and_meta(memory_size)

    LOG.debug("EEPROM type: %d, memory size: %d, memory start: %d, memory end: %d" % (
        eeprom_type, memory_size, ch_memory_start, ch_memory_end))
    set_mem_struct_from_settings(memory_size)

    addr = 0
    status.cur = 0
    status.max = memory_size
    status.msg = f"Downloading Config from radio"

    current_offset = _get_offset(serport, 0, 0)
    if current_offset == 2 and memory_size > 65536:
        raise errors.RadioError(
            "Radio's UART driver has 4 byte offset but memory size is bigger than 512kb\n\nPlease update the firmware (it will be released after 12/08/2024)\n\nMeanwhile just set a smaller memory in the radio (max 512kb)")
    LOG.debug("current_offset: %d, memory_size: %d" % (current_offset, memory_size))

    while addr < SETTINGS_VF0_PRESET_SIZE:
        o = _readmem(serport, addr, MEM_BLOCK)
        status.cur = addr
        radio.status_fn(status)

        if o and len(o) == MEM_BLOCK:
            eeprom += o
            addr += MEM_BLOCK
        else:
            raise errors.RadioError("Config download incomplete")

    status.msg = f"Downloading Channels from radio"
    while addr < ch_memory_end:
        o = _readmem(serport, addr, MEM_BLOCK)
        status.cur = addr

        status.msg = f"Downloading Channels ({max(0, int(map_values(addr, ch_memory_start, ch_memory_end, 0, max_channels)))} / {max_channels})"
        radio.status_fn(status)
        if o and len(o) == MEM_BLOCK:
            eeprom += o
            addr += MEM_BLOCK
        else:
            raise errors.RadioError("Memory download incomplete")

    status.msg = f"Downloading Patch from radio"
    if has_patch:
        addr = memory_size - PATCH_SIZE
        while addr < memory_size:
            o = _readmem(serport, addr, MEM_BLOCK)
            status.cur = addr
            status.msg = f"Downloading Patch ({addr - (memory_size - PATCH_SIZE)} / {PATCH_SIZE})"
            radio.status_fn(status)

            if o and len(o) == MEM_BLOCK:
                eeprom += o
                addr += MEM_BLOCK
            else:
                raise errors.RadioError("Patch download incomplete")

    return memmap.MemoryMapBytes(eeprom)


# -------------------------------WRITE EEprom-------------------------------------------------
def do_upload(radio):
    serport = radio.pipe
    serport.timeout = 0.5
    status = chirp_common.Status()
    status.cur = 0
    memory_size = EEPROM_SIZES[radio._memobj.Settings.eepromType]
    (ch_memory_start, ch_memory_end, has_patch, max_channels) = get_mem_addrs_and_meta(memory_size)
    status.max = memory_size

    status.msg = "Uploading VFO Setting to radio"
    radio.status_fn(status)

    current_offset = _get_offset(serport, 0, 0)
    if current_offset == 2 and memory_size > 65536:
        raise errors.RadioError(
            "Radio's UART driver has 4 byte offset but memory size is bigger than 512kb\n\nPlease update the firmware (it will be released after 12/08/2024)\n\nMeanwhile just set a smaller memory in the radio (max 512kb)")
    LOG.debug("current_offset: %d, memory_size: %d" % (current_offset, memory_size))

    f = _sayhello(serport)
    if f:
        radio.FIRMWARE_VERSION = f
    else:
        return False
    # ---------------Write setting
    addr = 0
    status.msg = "Uploading Settings, VFO, Presets to radio"
    while addr < SETTINGS_VF0_PRESET_SIZE:
        o = radio.get_mmap()[addr:addr + MEM_BLOCK]
        _writemem(serport, o, addr)
        status.cur = addr
        radio.status_fn(status)
        if o:
            addr += MEM_BLOCK
        else:
            raise errors.RadioError("Upload Settings, VFO, Presets incomplete")

    # ----------------Empty, just for a nice scrollbar :)
    status.msg = ":) 73s from IU0QWJ :)"
    while addr < ch_memory_start - MEM_BLOCK:  # WWWWWWWWHY - MEM_BLOCK ?!?!?!?!!?!?!
        o = radio.get_mmap()[addr:addr + MEM_BLOCK]
        #  _writemem(serport, o, addr)
        status.cur = addr
        radio.status_fn(status)
        if o:
            addr += MEM_BLOCK
        else:
            raise errors.RadioError("Change your PC, this is not possible; ")

    # ----------------Write Mems
    status.msg = "Uploading Channels (0)"

    while addr < ch_memory_end:
        o = radio.get_mmap()[addr:addr + MEM_BLOCK]
        _writemem(serport, o, addr)
        status.cur = addr
        radio.status_fn(status)
        status.msg = f"Uploading Channels ({max(0, int(map_values(addr, ch_memory_start, ch_memory_end, 0, max_channels)))} / {max_channels})"
        if o:
            addr += MEM_BLOCK
        else:
            raise errors.RadioError("Memory upload incomplete")

    # ----------------Write Patch
    if has_patch:
        status.msg = "Uploading Patch"

        while addr < memory_size:
            o = radio.get_mmap()[addr:addr + MEM_BLOCK]
            _writemem(serport, o, addr)
            status.cur = addr
            radio.status_fn(status)
            status.msg = f"Uploading Patch ({addr - ch_memory_end} / {PATCH_SIZE})"
            if o:
                addr += MEM_BLOCK
            else:
                raise errors.RadioError("Memory upload incomplete")

    status.msg = "Upload OK"

    _resetradio(serport)

    return True


# --------------------------------------------------------------------------------

def bit_loc(bitnum):
    """
    return the ndx and mask for a bit location
    """
    return (bitnum // 16, 1 << (bitnum & 15))


def store_bit(ch, bank, val):
    """
    store a bit in a bankmem. Store 0 or 1 for False or True
    """
    banknum = bank.index
    ndx, mask = bit_loc(banknum)
    if val:
        ch.scanlists |= mask
    else:
        ch.scanlists &= ~mask
    return


def retrieve_bit(ch, bank):
    """
    return True or False for a bit in a bankmem
    """
    banknum = bank.index
    ndx, mask = bit_loc(banknum)
    return (ch.scanlists & mask) != 0


class FagciBankModel(chirp_common.BankModel):

    def get_num_mappings(self):
        return 8

    def get_mappings(self):
        banks = []
        for i in range(1, 1 + self.get_num_mappings()):
            bank = chirp_common.Bank(self, "%i" % i, "Scan List ")
            bank.index = i - 1
            banks.append(bank)
        return banks

    def add_memory_to_mapping(self, memory, bank):
        # chan_max = self._radio.get_features().memory_bounds[1]
        store_bit(self._radio._memobj.CH[memory.number], bank, True)
        LOG.debug("Memory %i added to %s." % (memory.number, memory))
        LOG.debug(memory)
        _mem = self._radio._memobj.CH[memory.number]
        memory_banks = self._radio._match_memory_banks(_mem.scanlists)
        memory.extra.scanlists = memory_banks

    def remove_memory_from_mapping(self, memory, bank):
        # chan_max = self._radio.get_features().memory_bounds[1]
        if not retrieve_bit(self._radio._memobj.CH[memory.number], bank):
            raise Exception("Memory %i is not in %s." % (memory.number, bank))

        store_bit(self._radio._memobj.CH[memory.number], bank, False)
        self._radio.get_memory(memory.number)
        _mem = self._radio._memobj.CH[memory.number]
        memory_banks = self._radio._match_memory_banks(_mem.scanlists)
        memory.extra.scanlists = memory_banks

    # return a list of slots in a bank
    def get_mapping_memories(self, bank):
        memories = []
        # chan_max = self._radio.get_features().memory_bounds[1]
        for i in range(*self._radio.get_features().memory_bounds):
            print('CH load',i)
            if retrieve_bit(self._radio._memobj.CH[i], bank):
                memories.append(self._radio.get_memory(i))
        return memories

    # return a list of banks a slot is a member of
    def get_memory_mappings(self, memory):
        banks = []
        # LOG.debug(self._radio._memobj.CH[chan_max - memory.number].scanlists)
        for bank in self.get_mappings():
            if retrieve_bit(self._radio._memobj.CH[memory.number], bank):
                banks.append(bank)
        return banks


def set_tx_code(_mem, curr_vfo, i, v):
    # tx_code
    key_name = f"vfo{i}_tx_code"
    tx_code = int(curr_vfo.code.tx.value)
    tx_codeType = int(_mem.VFO[i].code.tx.type)
    if (key_name in v):
        del v[key_name]
    if TX_CODE_TYPES[tx_codeType] == "CTCSS":
        if tx_code >= len(CTCSS_TONES):
            tx_code = 0
        v.append(RadioSetting(key_name, "TX Code",
                              RadioSettingValueList(CTCSS_TONES_NAMES, CTCSS_TONES_NAMES[tx_code]))
                 )
    elif TX_CODE_TYPES[tx_codeType] == "DCS" or TX_CODE_TYPES[tx_codeType] == "-DCS":
        if tx_code >= len(DTCS_CODES):
            tx_code = 0
        v.append(RadioSetting(key_name, "TX Code",
                              RadioSettingValueList(DTCS_CODES_NAMES, DTCS_CODES_NAMES[tx_code]))
                 )
    else:
        rs = RadioSettingValueString(0, 0, "")
        rs.set_mutable(False)
        v.append(RadioSetting(key_name, "TX Code", rs))


def set_rx_code(_mem, curr_vfo, i, v):
    # rx_code
    key_name = f"vfo{i}_rx_code"
    rx_code = int(curr_vfo.code.rx.value)
    rx_code_type = int(_mem.VFO[i].code.rx.type)
    if RX_CODE_TYPES[rx_code_type] == "CTCSS":
        if rx_code >= len(CTCSS_TONES):
            rx_code = 0
        v.append(RadioSetting(key_name, "RX Code",
                              RadioSettingValueList(CTCSS_TONES_NAMES, CTCSS_TONES_NAMES[rx_code]))
                 )
    elif RX_CODE_TYPES[rx_code_type] == "DCS" or RX_CODE_TYPES[rx_code_type] == "-DCS":
        if rx_code >= len(DTCS_CODES):
            rx_code = 0
        v.append(RadioSetting(key_name, "RX Code",
                              RadioSettingValueList(DTCS_CODES_NAMES, DTCS_CODES_NAMES[rx_code]))
                 )
    else:
        rs = RadioSettingValueString(0, 0, "")
        rs.set_mutable(False)
        v.append(RadioSetting(key_name, "RX Code", rs))


@directory.register
class UVK5Radio(chirp_common.CloneModeRadio):
    """Quansheng UV-K5"""
    VENDOR = "Quansheng"
    MODEL = "UV-K5"
    VARIANT = "FAGCI-REBORN"
    BAUD_RATE = 38400
    NEEDS_COMPAT_SERIAL = False
    FIRMWARE_VERSION = "300"
    _expanded_limits = True

    def get_bank_model(self):
        return FagciBankModel(self)

    # --------------------------------------------------------------------------------
    def get_prompts(x=None):
        rp = chirp_common.RadioPrompts()
        rp.experimental = _(
            'This is an experimental driver for the Quansheng UV-K5. '
            'It may harm your radio, or worse. Use at your own risk.\n\n'
            'Before attempting to do any changes please download '
            'the memory image from the radio with chirp '
            'and keep it. This can be later used to recover the '
            'original settings. \n\n'
            'some details are not yet implemented')
        rp.pre_download = _(
            "1. Turn radio on.\n"
            "2. Connect cable to mic/spkr connector.\n"
            "3. Make sure connector is firmly connected.\n"
            "4. Click OK to download image from device.\n\n"
            "It will may not work if you turn on the radio "
            "with the cable already attached\n")
        rp.pre_upload = _(
            "1. Turn radio on.\n"
            "2. Connect cable to mic/spkr connector.\n"
            "3. Make sure connector is firmly connected.\n"
            "4. Click OK to upload the image to device.\n\n"
            "It will may not work if you turn on the radio "
            "with the cable already attached")
        return rp

    # --------------------------------------------------------------------------------
    # Return information about this radio's features, including
    # how many memories it has, what bands it supports, etc
    def get_features(self):
        rf = chirp_common.RadioFeatures()
        rf.has_bank = True
        rf.has_bank_index = True
        rf.has_rx_dtcs = True
        rf.has_ctone = True
        rf.has_settings = True
        rf.has_comment = True
        rf.has_nostep_tuning = True
        rf.has_tuning_step = False
        rf.valid_dtcs_codes = DTCS_CODES
        rf.valid_name_length = 10
        rf.valid_power_levels = UVK5_POWER_LEVELS
        #rf.valid_duplexes = ["", "off", "-", "+"]
        #rf.valid_tuning_steps = STEPS
        rf.valid_tmodes = ["", "Tone", "TSQL", "DTCS", "Cross"]
        rf.valid_cross_modes = ["Tone->Tone", "Tone->DTCS", "DTCS->Tone", "->Tone", "->DTCS", "DTCS->", "DTCS->DTCS"]
        rf.valid_characters = chirp_common.CHARSET_ASCII
        rf.valid_modes = MODULATION_LIST_MAP
        rf.valid_tuning_steps = []

        # rf.valid_skips = ["", "S"]
        rf.valid_skips = []
        rf._expanded_limits = True
        rf.memory_bounds = (1, self.max_channels)

        return rf

    # --------------------------------------------------------------------------------
    # Do a download of the radio from the serial port
    def sync_in(self):
        self._mmap = do_download(self)
        self.process_mmap()
        

    # --------------------------------------------------------------------------------
    # Do an upload of the radio to the serial port
    def sync_out(self):
        do_upload(self)

    # --------------------------------------------------------------------------------
    # Convert the raw byte array into a memory object structure
    def process_mmap(self):

        settings_parsed = bitwise.parse(MEM_SETTINGS, self._mmap)
        eeprom_type = settings_parsed["Settings"]['eepromType']
        memory_size = EEPROM_SIZES[eeprom_type]
        set_mem_struct_from_settings(memory_size)
        self._memobj = bitwise.parse(MEM_FORMAT, self._mmap)
        (_, _, has_patch, max_channels) = get_mem_addrs_and_meta(memory_size)
        self.max_channels = max_channels
        if has_patch:
            copy_patch(self._memobj, OLD_PATCH_VALUE)

    # --------------------------------------------------------------------------------
    # Return a raw representation of the memory object, which
    # is very helpful for development
    def get_raw_memory(self, number):
        return repr(self._memobj.CH[number - 1])

    # --------------------------------------------------------------------------------
    def validate_memory(self, mem):
        msgs = super().validate_memory(mem)

        if mem.name == "" or mem.name == "<new>":
            mem.name = f"{(mem.freq / 1000 / 1000):.4f}"
            self._memobj.CH[self.max_channels - mem.number].scanlists = 0x00

        if mem.duplex not in ['', "-", "+"]:
            msgs.append(chirp_common.ValidationError("Invalid duplex setting: %s" % mem.duplex))

        return msgs

    # --------------------------------------------------------------------------------
    def _set_tone(self, mem, _mem):
        ((txmode, txtone, txpol),
         (rxmode, rxtone, rxpol)) = chirp_common.split_tone_encode(mem)

        if txmode == "Tone":
            txmoval = TX_CODE_TYPES.index("CTCSS")
            txtoval = CTCSS_TONES.index(txtone)
        elif txmode == "DTCS":
            txmoval = txpol == "R" and TX_CODE_TYPES.index("-DCS") or TX_CODE_TYPES.index("DCS")
            txtoval = DTCS_CODES.index(txtone)
        else:
            txmoval = TX_CODE_TYPES.index("None")
            txtoval = 0

        if rxmode == "Tone":
            rxmoval = RX_CODE_TYPES.index("CTCSS")
            rxtoval = CTCSS_TONES.index(rxtone)
        elif rxmode == "DTCS":
            rxmoval = rxpol == "R" and RX_CODE_TYPES.index("-DCS") or RX_CODE_TYPES.index("DCS")
            rxtoval = DTCS_CODES.index(rxtone)
        else:
            rxmoval = RX_CODE_TYPES.index("None")
            rxtoval = 0

        _mem.code.rx.type = rxmoval
        _mem.code.tx.type = txmoval
        _mem.code.rx.value = rxtoval
        _mem.code.tx.value = txtoval

    # --------------------------------------------------------------------------------
    def _get_tone(self, mem, _mem):
        rx_pol = None
        tx_pol = None

        rxtype = _mem.code.rx.type
        txtype = _mem.code.tx.type

        if rxtype >= len(TMODES):
            rxtype = 0
        rx_tmode = TMODES[rxtype]

        if txtype >= len(TMODES):
            txtype = 0
        tx_tmode = TMODES[txtype]

        rx_tone = tx_tone = "None"

        if tx_tmode == "Tone":
            if _mem.code.tx.value < len(CTCSS_TONES):
                tx_tone = CTCSS_TONES[_mem.code.tx.value]
            else:
                tx_tone = 0
        elif tx_tmode == "DTCS":
            if _mem.code.tx.value < len(DTCS_CODES):
                tx_tone = DTCS_CODES[_mem.code.tx.value]
                tx_pol = TX_CODE_TYPES[txtype] == "DCS" and "N" or "R"
            else:
                tx_tone = 0

        if rx_tmode == "Tone":
            if _mem.code.rx.value < len(CTCSS_TONES):
                rx_tone = CTCSS_TONES[_mem.code.rx.value]
            else:
                rx_tone = 0
        elif rx_tmode == "DTCS":
            if _mem.code.rx.value < len(DTCS_CODES):
                rx_tone = DTCS_CODES[_mem.code.rx.value]
                rx_pol = RX_CODE_TYPES[rxtype] == "DCS" and "N" or "R"
            else:
                rx_tone = 0

        tx_tmode = TMODES[txtype]
        rx_tmode = TMODES[rxtype]

        chirp_common.split_tone_decode(mem, (tx_tmode, tx_tone, tx_pol), (rx_tmode, rx_tone, rx_pol))

    def _match_memory_banks(self, memory_banks):
        if memory_banks == 0:
            return "----------------"
        elif memory_banks == 0xFFFF:
            return "All"
        elif bin(memory_banks).count('1') == 1:
            result = []
            for i in range(16):
                if memory_banks & (1 << i):
                    result.append(str(i + 1))
                else:
                    result.append('-')
            return ''.join(result)
        else:
            return "Custom"

    def set_bits_from_string(self, bit_string, value):
        if bit_string == "Custom":
            return value
        else:
            value = 0

        if bit_string == "----------------":
            return 0
        elif bit_string == "All":
            return 0xFF
        else:
            for i, char in enumerate(bit_string):
                if char != '-':
                    value |= (1 << (i))
        return value

    # --------------------------------------------------------------------------------
    # Extract a high-level memory object from the low-level memory map
    # This is called to populate a memory in the UI
    def get_memory(self, number2):

        _mem = self._memobj
        mem = chirp_common.Memory()
        number = self.max_channels - number2
        mem.number = self.max_channels - number
        _mem = self._memobj.CH[number]

        # if number > (self.max_channels - 1):
        #     mem.immutable = ["name", "scanlists"]
        # else:
        for char in _mem.name:
            if str(char) == "\xFF" or str(char) == "\x00":
                break
            mem.name += str(char)


        tag = mem.name.strip()
        mem.name = tag

        if _mem.meta.type == TYPE_EMPTY:
            mem.empty = True
            # set some sane defaults:
            mem.power = UVK5_POWER_LEVELS[0]
            mem.extra = RadioSettingGroup("Extra", "extra")

            rs = RadioSetting("radio", "Radio", RadioSettingValueList(RADIO_LIST, RADIO_LIST[0]))
            mem.extra.append(rs)

            rs = RadioSetting("bandwidth", "Bandwidth", RadioSettingValueList(BANDWIDTH_LIST, BANDWIDTH_LIST[1]))
            mem.extra.append(rs)

            mem.duplex = ""
            mem.mode = MODULATION_LIST_MAP[0]
            mem.offset = 0

            return mem

        # Convert your low-level frequency to Hertz
        mem.freq = int(_mem.rxF) * 10
        freq_tx = int(_mem.txF) * 10
        offset = 0 if freq_tx == 0 or (_mem.txF == 0x7FFFFFF) else int(freq_tx - mem.freq)

        # LOG.debug(f"name: {mem.name}, mem.freq: {mem.freq}, freq_tx: {freq_tx}, mem.offset: {mem.offset}")

        if offset == 0:
            mem.duplex = ''
        elif offset < 0:
            mem.duplex = '-'
        else:
            mem.duplex = '+'

        mem.offset = abs(offset)
        # tone data
        self._get_tone(mem, _mem)

        # mode
        if _mem.modulation >= len(MODULATION_LIST_MAP):
            mem.mode = MODULATION_LIST_MAP[0]
        else:
            mem.mode = MODULATION_LIST_MAP[_mem.modulation]

        # power
        if _mem.power >= len(UVK5_POWER_LEVELS):
            mem.power = UVK5_POWER_LEVELS[0]
        else:
            mem.power = UVK5_POWER_LEVELS[_mem.power]

        # We'll consider any blank (i.e. 0 MHz frequency) to be empty
        if (_mem.rxF == 0xffffffff) or (_mem.rxF == 0) or (_mem.rxF == 0x7fffffff) or mem.name == "":
            mem.empty = True
        else:
            mem.empty = False

        mem.extra = RadioSettingGroup("Extra", "extra")

        # bandwidth
        bwidth = _mem.bw
        if bwidth >= len(BANDWIDTH_LIST):
            bwidth = 0
        rs = RadioSetting("bandwidth", "Bandwidth", RadioSettingValueList(BANDWIDTH_LIST, BANDWIDTH_LIST[bwidth]))
        mem.extra.append(rs)

        radio = _mem.radio
        rs = RadioSetting("radio", "Radio", RadioSettingValueList(RADIO_LIST, RADIO_LIST[radio]))
        mem.extra.append(rs)

        memory_banks = self._match_memory_banks(_mem.scanlists)
        memory_banks_idx = BIT_MASK_NAMES.index(memory_banks)
        rs = RadioSetting("scanlists", "Memory Banks",
                          RadioSettingValueList(BIT_MASK_NAMES, BIT_MASK_NAMES[memory_banks_idx]))
        mem.extra.append(rs)

        #LOG.debug("Setting memory #%d banks to %s" % (number, memory_banks))

        return mem

    # --------------------------------------------------------------------------------
    # Store details about a high-level memory to the memory map
    # This is called when a user edits a memory in the UI
    def set_memory(self, mem):

        number = self.max_channels - mem.number

        if number > self.max_channels:
            return mem

        # Get a low-level memory object mapped to the image
        _mem = self._memobj.CH[number]

        old_rx_freq = _mem.rxF
        # frequency/offset
        _mem.rxF = int(mem.freq / 10)
        rx_delta = old_rx_freq - _mem.rxF
        # _mem.txF = mem.freq / 10
        # _mem.offset = mem.offset / 10

        LOG.debug(
            f"mem.freq: {mem.freq}, _mem.rxF: {int(_mem.rxF)} mem.duplex: {mem.duplex}, "
            f"_mem.txF: {int(_mem.txF)}, mem.offset: {mem.offset}"
        )

        if mem.duplex == '-':
            _mem.txF = int(_mem.rxF - mem.offset / 10)
            # _mem.txF += rx_delta  # FIXME: this is a hack to keep the offset the same, but it's not working
        elif mem.duplex == '+':
            _mem.txF = int(_mem.rxF + mem.offset / 10)
            # _mem.txF += rx_delta  # FIXME: this is a hack to keep the offset the same, but it's not working
        elif mem.duplex == '':
            _mem.txF = 0

        _mem.txF += rx_delta

        LOG.debug(
            f"mem.freq: {mem.freq}, _mem.rxF: {int(_mem.rxF)} mem.duplex: {mem.duplex}, "
            f"_mem.txF: {int(_mem.txF)},  mem.offset: {mem.offset}"
        )

        # name
        tag = mem.name.ljust(10)
        if mem.freq == 0:
            _mem.name = b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            return mem
        _mem.name = sanitize_str_10(tag)

        # tone data
        self._set_tone(mem, _mem)

        # tx power
        if str(mem.power) == str(UVK5_POWER_LEVELS[3]):
            _mem.power = TXPOWER_LIST.index("High")
        elif str(mem.power) == str(UVK5_POWER_LEVELS[2]):
            _mem.power = TXPOWER_LIST.index("Mid")
        elif str(mem.power) == str(UVK5_POWER_LEVELS[1]):
            _mem.power = TXPOWER_LIST.index("Low")
        else:
            _mem.power = TXPOWER_LIST.index("ULow")
        _mem.modulation = MODULATION_LIST_MAP.index(mem.mode)

        for setting in mem.extra:
            sname = setting.get_name()
            svalue = setting.value.get_value()

            # LOG.debug(f"---------------------\n-------------------\n------------------\nSetting: {sname} Value: {svalue}\n-----------------\n---------------------\n-----------------")

            if sname == "bandwidth":
                _mem.bw = BANDWIDTH_LIST.index(svalue)

            if sname == "radio":
                _mem.radio = RADIO_LIST.index(svalue)

            if sname == "scanlists":
                _mem.scanlists = self.set_bits_from_string(svalue, _mem.scanlists)
        LOG.debug("--------------end of set_memory-----------------")
        return mem

    # --------------------------------------------------------------------------------
    def get_settings(self):
        _mem = self._memobj
        (_, _, has_patch, _) = get_mem_addrs_and_meta(EEPROM_SIZES[_mem.Settings.eepromType])

        basic = RadioSettingGroup("basic", "Basic Settings")
        radio_settings = RadioSettingGroup("radio_settings", "Radio")
        display_battery = RadioSettingGroup("display_battery", "Display & Battery")
        sql = RadioSettingGroup("sql", "SQL")
        patch = RadioSettingGroup("patches", "Patches")

        # --------------------------------------------------------------------------------
        # helper function
        def append_label(radio_setting, label, descr=""):
            if not hasattr(append_label, 'idx'):
                append_label.idx = 0

            append_label_val = RadioSettingValueString(len(descr), len(descr), descr)
            append_label_val.set_mutable(False)
            append_label_rs = RadioSetting("label" + str(append_label.idx), label, append_label_val)
            append_label.idx += 1
            radio_setting.append(append_label_rs)

        # readonly info
        # Firmware
        #firmware = self.metadata.get('uvk5_firmware', 'UNKNOWN')
        firmware = self.FIRMWARE_VERSION

        val = RadioSettingValueString(0, 128, firmware)
        val.set_mutable(False)
        rs = RadioSetting("fw_ver", "Firmware Version", val)
        basic.append(rs)

        # append_label(basic, f"Last Used Freq Offset 1: {_mem.lastUsedFreq_offset_2}")
        # append_label(basic, f"Last Used Freq Offset 2: {_mem.lastUsedFreq_offset_2}")

        ############
        #   VFO    #
        ############
        vfo = []
        for i in range(len(_mem.VFO)):
            curr_vfo = _mem.VFO[i]
            v = RadioSettingGroup(f"vfo{i}", f"VFO {i + 1}")

            #tx_f
            tx = int(curr_vfo.txF)
            v.append(
                RadioSetting(f"vfo{i}_tx_f", "TX Frequency", RadioSettingValueInteger(0, MAX_FREQ, tx * 10)))

            #tx_codeType
            tx_codeType = int(curr_vfo.code.tx.type)
            if tx_codeType >= len(TX_CODE_TYPES):
                tx_codeType = 0
            v.append(RadioSetting(f"vfo{i}_tx_codeType", "TX Code Type",
                                  RadioSettingValueList(TX_CODE_TYPES, TX_CODE_TYPES[tx_codeType])))

            set_tx_code(_mem, curr_vfo, i, v)

            #rx_f
            rx = int(curr_vfo.rxF)
            v.append(
                RadioSetting(f"vfo{i}_rx_f", "RX Frequency", RadioSettingValueInteger(MIN_FREQ, MAX_FREQ, rx * 10)))

            #rx_codeType
            rx_codeType = int(curr_vfo.code.rx.type)
            if rx_codeType >= len(RX_CODE_TYPES):
                rx_codeType = 0
            v.append(RadioSetting(f"vfo{i}_rx_codeType", "RX Code Type",
                                  RadioSettingValueList(RX_CODE_TYPES, RX_CODE_TYPES[rx_codeType])))

            set_rx_code(_mem, curr_vfo, i, v)

            #channel
            channel = curr_vfo.channel
            if channel >= len(_mem.CH) or channel < -1:
                channel = 0
            v.append(RadioSetting(f"vfo{i}_channel", "VFO Channel",
                                  RadioSettingValueInteger(0, self.max_channels, channel + 1)))

            #modulation
            modulation = int(curr_vfo.modulation)
            if modulation >= len(MODULATION_LIST_MAP):
                modulation = 0
            v.append(RadioSetting(f"vfo{i}_modulation", "VFO Modulation",
                                  RadioSettingValueList(MODULATION_LIST_MAP, MODULATION_LIST_MAP[modulation])))

            #power
            power = curr_vfo.power
            if power >= len(UVK5_POWER_LEVELS):
                power = 0
            v.append(RadioSetting(f"vfo{i}_power", "VFO Power",
                                  RadioSettingValueList(TXPOWER_LIST, TXPOWER_LIST[power])))

            #radio
            radio = curr_vfo.radio
            if radio >= len(RADIO_LIST):
                radio = 0
            v.append(RadioSetting(f"vfo{i}_radio", "Radio", RadioSettingValueList(RADIO_LIST, RADIO_LIST[radio])))

            vfo.append(v)
       
        ############
        #  PRESET  #
        ############
        presets = []
        for i in range(len(_mem.Preset)):

            curr_pr = _mem.Preset[i]
            band = curr_pr.Band
            name = sanitize_str(band.name)
            n = str(name).strip("\x20\x00\xff")
            pr = RadioSettingGroup(f"preset{i}", f"Preset {i + 1} ({n})")

            # LOG.debug(f"Processing preset {i}")
            # LOG.debug(f"Current preset: {curr_pr}")

            # PowerCalibration.s
            pr.append(RadioSetting(f"preset{i}_PowerCalibration_s", "Power Calibration S",
                                   RadioSettingValueInteger(0, 255, curr_pr.PowerCalibration.s)))

            # PowerCalibration.m
            pr.append(RadioSetting(f"preset{i}_PowerCalibration_m", "Power Calibration M",
                                   RadioSettingValueInteger(0, 255, curr_pr.PowerCalibration.m)))

            # PowerCalibration.e
            pr.append(RadioSetting(f"preset{i}_PowerCalibration_e", "Power Calibration E",
                                   RadioSettingValueInteger(0, 255, curr_pr.PowerCalibration.e)))

            # start
            start_freq = curr_pr.Band.FRange.start
            start_freq_rs = RadioSettingValueInteger(0, MAX_FREQ, start_freq * 10)
            pr.append(RadioSetting(f"preset{i}_band_start", "Start Frequency", start_freq_rs))

            # end
            end_freq = curr_pr.Band.FRange.end_msb << 5 | curr_pr.Band.FRange.end_lsb
            end_freq_rs = RadioSettingValueInteger(0, MAX_FREQ, end_freq * 10)
            pr.append(RadioSetting(f"preset{i}_band_end", "End Frequency", end_freq_rs))

            # lastUsedFreq_offset_1
            freq1 = curr_pr.lastUsedFreq_rx
            lastUsedFreq_offset_1 = RadioSettingValueInteger(0, MAX_FREQ, freq1 * 10)
            lastUsedFreq_offset_1.set_mutable(True)
            pr.append(RadioSetting(f"preset{i}_lastUsedFreq_rx", "Last Used Freq Rx", lastUsedFreq_offset_1))

            # lastUsedFreq_offset_2
            freq2 = curr_pr.lastUsedFreq_tx_msb << 5 | curr_pr.lastUsedFreq_tx_lsb
            lastUsedFreq_offset_2 = RadioSettingValueInteger(0, MAX_FREQ, freq2 * 10)
            lastUsedFreq_offset_2.set_mutable(True)
            pr.append(RadioSetting(f"preset{i}_lastUsedFreq_tx", "Last Used Freq Tx", lastUsedFreq_offset_2))

            # name
            pr.append(RadioSetting(f"preset{i}_band_name", "Band Name", RadioSettingValueString(0, 9, n)))

            # modulation
            modulation = band.modulation
            if modulation >= len(MODULATION_LIST_MAP):
                modulation = 0
            pr.append(RadioSetting(f"preset{i}_band_modulation", "Band Modulation",
                                   RadioSettingValueList(MODULATION_LIST_MAP, MODULATION_LIST_MAP[modulation])))

            # step
            step = band.step
            if step >= len(STEP_NAMES):
                step = 0
            pr.append(
                RadioSetting(f"preset{i}_band_step", "Band Step", RadioSettingValueList(STEP_NAMES, STEP_NAMES[step])))

            # bw
            bw = band.bw
            if bw >= len(BANDWIDTH_LIST):
                bw = 0
            pr.append(RadioSetting(f"preset{i}_band_bw", "Band Bandwidth",
                                   RadioSettingValueList(BANDWIDTH_LIST, BANDWIDTH_LIST[bw])))

            # squelch Type
            squelch_type = band.squelchType
            if squelch_type >= len(SQUELCH_TYPE_LIST):
                squelch_type = 0
            pr.append(RadioSetting(f"preset{i}_band_squelch_type", "Band Squelch Type",
                                   RadioSettingValueList(SQUELCH_TYPE_LIST, SQUELCH_TYPE_LIST[squelch_type])))

            # sql
            pr.append(RadioSetting(f"preset{i}_band_squelch", "SQL",
                                   RadioSettingValueInteger(0, 15, band.squelch)))

            #gainIndex
            pr.append(RadioSetting(f"preset{i}_band_gainIndex", "Gain Index",
                                   RadioSettingValueInteger(0, math.pow(2, 5) - 1, band.gainIndex)))

            # #reserved1
            # pr.append(RadioSetting("band_reserved1", "Reserved 1",
            #                        RadioSettingValueInteger(0, 255, band.reserved1)))

            #Memory Bank
            pr.append(RadioSetting(f"preset{i}_scanlists", "Memory Bank",
                                   RadioSettingValueInteger(0, 255, curr_pr.scanlists)))

            #radio
            radio = curr_pr.radio
            if radio >= len(RADIO_LIST):
                radio = 0
            pr.append(RadioSetting(f"preset{i}_radio", "Radio", RadioSettingValueList(RADIO_LIST, RADIO_LIST[radio])))

            #offset dir
            offsetDir = curr_pr.offsetDir
            if offsetDir >= len(OFFSET_DIRECTION):
                offsetDir = 0
            pr.append(RadioSetting(f"preset{i}_offsetDir", "Offset Direction",
                                   RadioSettingValueList(OFFSET_DIRECTION, OFFSET_DIRECTION[offsetDir])))

            #allow Tx
            tmpval = curr_pr.allowTx
            rs = RadioSetting(f"preset{i}_allowTx", "Allow Tx", RadioSettingValueBoolean(bool(tmpval)))
            pr.append(rs)

            #power
            power = curr_pr.power
            if power >= len(TXPOWER_LIST):
                power = 0
            pr.append(
                RadioSetting(f"preset{i}_power", "Power", RadioSettingValueList(TXPOWER_LIST, TXPOWER_LIST[power])))

            presets.append(pr)

        ############
        #  PATCH   #
        ############


        ssb_patch_idx = 2
        
        if has_patch:
            if self.is_none_patched(_mem):
                ssb_patch_idx = 0
            elif self.is_ssb_v1_patched(_mem):
                ssb_patch_idx = 1
          
        val = RadioSettingValueList(SSB_PATCHES, SSB_PATCHES[ssb_patch_idx])
        val.set_mutable(has_patch)
        rs = RadioSetting("ssb_patch", "SSB Patch", val)
        patch.append(rs)

        tmpval = _mem.Settings.checkbyte
        rs = RadioSetting("checkbyte", "Check Byte", RadioSettingValueInteger(0, 31, tmpval))
        basic.append(rs)

        tmpval = _mem.Settings.eepromType
        val = RadioSettingValueList(EEPROM_TYPE, EEPROM_TYPE[tmpval])
        val.set_mutable(False)
        rs = RadioSetting("eepromType", "EPPROM Type", val)
        basic.append(rs)

        tmpval = _mem.Settings.vox
        rs = RadioSetting("vox", "Vox", RadioSettingValueInteger(0, 15, tmpval))
        basic.append(rs)

        tmpval = _mem.Settings.batsave
        rs = RadioSetting("battsave", "Battery Save", RadioSettingValueInteger(0, 15, tmpval))
        display_battery.append(rs)

        tmpval = _mem.Settings.txTime
        rs = RadioSetting("txTime", "Tx Time", RadioSettingValueInteger(0, 15, tmpval))
        radio_settings.append(rs)

        tmpval = _mem.Settings.backlight
        rs = RadioSetting("backlight", "BLmode (TX/RX)",
                          RadioSettingValueList(BL_TIME_NAMES, BL_TIME_NAMES[tmpval])) 
        display_battery.append(rs)

        tmpval = _mem.Settings.currentScanlist
        if tmpval >= 8:
            tmpval = 0
        rs = RadioSetting("currentScanlist", "Current Scan List", RadioSettingValueInteger(1, 8, tmpval + 1))
        basic.append(rs)

        tmpval = _mem.Settings.chDisplayMode
        rs = RadioSetting("chDisplayMode", "Channel Display Mode", RadioSettingValueInteger(0, 3, tmpval))
        basic.append(rs)

        tmpval = _mem.Settings.micGain
        rs = RadioSetting("micGain", "Mic Gain", RadioSettingValueInteger(0, 15, tmpval))
        basic.append(rs)

        tmpval = _mem.Settings.scanmode
        rs = RadioSetting("scanmode", "Scan Mode", RadioSettingValueInteger(0, 3, tmpval))
        basic.append(rs)

        tmpval = _mem.Settings.roger
        rs = RadioSetting("roger", "Roger", RadioSettingValueList(ROGER_NAMES, ROGER_NAMES[tmpval]))
        radio_settings.append(rs)

        tmpval = _mem.Settings.upconverter
        rs = RadioSetting("upconverter", "Upconverter",
                          RadioSettingValueInteger(0, 134000000, tmpval))
        radio_settings.append(rs)

        tmpval = _mem.Settings.dtmfdecode
        rs = RadioSetting("dtmfdecode", "DTMF Decode", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.repeaterSte
        rs = RadioSetting("repeaterSte", "RP-STE (Repeater Squelch Tail Eliminator)",
                          RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.ste
        rs = RadioSetting("ste", "STE (Squelch Tail Eliminator)", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.busyChannelTxLock
        rs = RadioSetting("busyChannelTxLock", "Busy Channel Lock", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.keylock
        rs = RadioSetting("keylock", "Keylock", RadioSettingValueBoolean(bool(tmpval)))
        basic.append(rs)

        tmpval = _mem.Settings.beep
        rs = RadioSetting("beep", "Beep", RadioSettingValueBoolean(bool(tmpval)))
        basic.append(rs)

        tmpval = _mem.Settings.crossBand
        rs = RadioSetting("crossBand", "CrossBand", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.dw
        rs = RadioSetting("dw", "Dual Watch", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.contrast - 8
        rs = RadioSetting("contrast", "Contrast", RadioSettingValueInteger(-8, 7, tmpval))
        display_battery.append(rs)

        tmpval = _mem.Settings.brightness
        rs = RadioSetting("brightness", "Brightness", RadioSettingValueInteger(0, 15, tmpval))
        display_battery.append(rs)

        tmpval = _mem.Settings.mainApp
        rs = RadioSetting("mainApp", "Main App", RadioSettingValueList(APP_LIST, APP_LIST[tmpval]))
        basic.append(rs)

        tmpval = _mem.Settings.activePreset
        PRESET_NAMES = [re.sub(ALLOWED_CHARS_PATTERN, ' ', str(preset.Band.name)).strip() + "\x00" for preset in
                        _mem.Preset]
        # LOG.debug(f"PRESET_NAMES: {PRESET_NAMES}, activePreset: {tmpval}")
        rs = RadioSetting("activePreset", "Active Preset", RadioSettingValueList(PRESET_NAMES, PRESET_NAMES[tmpval]))
        basic.append(rs)

        tmpval = _mem.Settings.presetsCount
        val = RadioSettingValueInteger(0, 255, tmpval)
        val.set_mutable(False)
        rs = RadioSetting("presetsCount", "Preset Count", val)
        basic.append(rs)

        #Battery
        tmpval = _mem.Settings.batteryStyle
        rs = RadioSetting("batteryStyle", "Battery Style Name",
                          RadioSettingValueList(BATTERY_STYLE_NAMES, BATTERY_STYLE_NAMES[tmpval]))
        display_battery.append(rs)

        tmpval = _mem.Settings.batteryType
        rs = RadioSetting("batteryType", "Battery Type",
                          RadioSettingValueList(BATTERY_TYPE_NAMES, BATTERY_TYPE_NAMES[tmpval]))
        display_battery.append(rs)

        tmpval = _mem.Settings.batteryCalibration
        rs = RadioSetting("batteryCalibration", "Battery Calibration",
                          RadioSettingValueInteger(0, math.pow(2, 12) - 1, tmpval))
        display_battery.append(rs)

        tmpval = _mem.Settings.sqOpenedTimeout
        rs = RadioSetting("sqOpenedTimeout", "SCAN listen time",
                          RadioSettingValueList(SCAN_TIMEOUT_NAMES, SCAN_TIMEOUT_NAMES[tmpval]))
        sql.append(rs)

        tmpval = _mem.Settings.sqClosedTimeout
        rs = RadioSetting("sqClosedTimeout", "SCAN after close timex",
                          RadioSettingValueList(SCAN_TIMEOUT_NAMES, SCAN_TIMEOUT_NAMES[tmpval]))
        sql.append(rs)

        tmpval = _mem.Settings.backlightOnSquelch
        rs = RadioSetting("backlightOnSquelch", "Backlight On Squelch",
                          RadioSettingValueList(BL_SQL_MODE_NAMES, BL_SQL_MODE_NAMES[tmpval]))
        display_battery.append(rs)

        tmpval = _mem.Settings.noListen
        rs = RadioSetting("noListen", "No Listen", RadioSettingValueBoolean(bool(tmpval)))
        basic.append(rs)

        tmpval = _mem.Settings.si4732PowerOff
        rs = RadioSetting("si4732PowerOff", "SI4732 Power Off", RadioSettingValueBoolean(bool(tmpval)))
        basic.append(rs)

        tmpval = _mem.Settings.bound_240_280
        rs = RadioSetting("bound_240_280", "Bound 240 / 280",
                          RadioSettingValueList(BOUND_240_280_NAMES, BOUND_240_280_NAMES[tmpval]))
        radio_settings.append(rs)

        tmpval = _mem.Settings.scanTimeout
        rs = RadioSetting("scanTimeout", "SCAN single freq Time", RadioSettingValueInteger(0, 255, tmpval))
        radio_settings.append(rs)

        tmpval = _mem.Settings.activeVFO
        rs = RadioSetting("activeVFO", "Active VFO", RadioSettingValueList(VFOs, VFOs[tmpval]))
        basic.append(rs)

        tmpval = _mem.Settings.skipGarbageFrequencies
        rs = RadioSetting("skipGarbageFrequencies", "Skip Garbage Frequencies", RadioSettingValueBoolean(bool(tmpval)))
        radio_settings.append(rs)

        tmpval = _mem.Settings.sqlOpenTime
        if tmpval >= len(SQL_OPEN_NAMES):
            tmpval = 0
        rs = RadioSetting("sqlOpenTime", "SQL open time",
                          RadioSettingValueList(SQL_OPEN_NAMES, SQL_OPEN_NAMES[tmpval]))
        sql.append(rs)

        tmpval = _mem.Settings.sqlCloseTime
        if tmpval >= len(SQL_CLOSE_NAMES):
            tmpval = 0
        rs = RadioSetting("sqlCloseTime", "SQL close time",
                          RadioSettingValueList(SQL_CLOSE_NAMES, SQL_CLOSE_NAMES[tmpval]))
        sql.append(rs)

        # tmpval = sanitize_str(_mem.Settings.nickName)
        # rs = RadioSetting("nickName", "Nick Name", RadioSettingValueString(0, 10, str(tmpval).strip("\x20\x00\xff")))
        # basic.append(rs)

        top = RadioSettings(basic, radio_settings, display_battery, sql, patch, *vfo, *presets)
        return top

    # --------------------------------------------------------------------------------

    def is_ssb_v1_patched(self, _mem):
        for i in range(len(_mem.Patch)):
            curr_patch_blocks = _mem.Patch[i].patch_data
            for j in range(len(curr_patch_blocks)):
                test = 0
                curr_patch_data_ptr = i * PATCH_DATA_BLOCK_SIZE + j * PATCH_BLOCK_SIZE
                for k in range(PATCH_BLOCK_SIZE):
                    test |= RAW_PATCH_DATA[curr_patch_data_ptr + k] << (8 * (PATCH_BLOCK_SIZE - k - 1))
                LOG.debug("curr_patch_blocks[j] = %x, test=%x" % (curr_patch_blocks[j],test ))
                if curr_patch_blocks[j] != test:
                    return False
        return True
    
    def is_none_patched(self, _mem):
        for i in range(len(_mem.Patch)):
            curr_patch_blocks = _mem.Patch[i].patch_data
            for j in range(len(curr_patch_blocks)):
                test = 0
                for k in range(PATCH_BLOCK_SIZE):
                    test |= (0xff << (k * 8))
                if curr_patch_blocks[j] != test:
                    return False
        return True

    # --------------------------------------------------------------------------------
    def set_settings(self, settings):

        _mem = self._memobj
        for element in settings:
            if not isinstance(element, RadioSetting):
                self.set_settings(element)
                continue

            if element.get_name() == "checkbyte":
                _mem.Settings.checkbyte = int(element.value)

            if element.get_name() == "eepromType":
                _mem.Settings.eepromType = EEPROM_TYPE.index(element.value)

            if element.get_name() == "vox":
                _mem.Settings.vox = int(element.value)

            if element.get_name() == "batsave":
                _mem.Settings.batsave = int(element.value)

            if element.get_name() == "txTime":
                _mem.Settings.txTime = int(element.value)

            if element.get_name() == "backlight":
                _mem.Settings.backlight = BL_TIME_NAMES.index(element.value)

            if element.get_name() == "currentScanlist":
                _mem.Settings.currentScanlist = int(element.value) - 1

            if element.get_name() == "micGain":
                _mem.Settings.micGain = int(element.value)

            if element.get_name() == "chDisplayMode":
                _mem.Settings.chDisplayMode = int(element.value)

            if element.get_name() == "scanmode":
                _mem.Settings.scanmode = int(element.value)

            if element.get_name() == "roger":
                _mem.Settings.roger = ROGER_NAMES.index(element.value)

            if element.get_name() == "upconverter":
                _mem.Settings.upconverter = element.value

            if element.get_name() == "dtmfdecode":
                _mem.Settings.dtmfdecode = element.value and 1 or 0

            if element.get_name() == "repeaterSte":
                _mem.Settings.repeaterSte = element.value and 1 or 0

            if element.get_name() == "ste":
                _mem.Settings.ste = element.value and 1 or 0

            if element.get_name() == "busyChannelTxLock":
                _mem.Settings.busyChannelTxLock = element.value and 1 or 0

            if element.get_name() == "keylock":
                _mem.Settings.keylock = element.value and 1 or 0

            if element.get_name() == "beep":
                _mem.Settings.beep = element.value and 1 or 0

            if element.get_name() == "crossBand":
                _mem.Settings.crossBand = element.value and 1 or 0

            if element.get_name() == "dw":
                _mem.Settings.dw = element.value and 1 or 0

            if element.get_name() == "contrast":
                _mem.Settings.contrast = int(element.value) + 8

            if element.get_name() == "brightness":
                _mem.Settings.brightness = int(element.value)

            if element.get_name() == "mainApp":
                _mem.Settings.mainApp = APP_LIST.index(element.value)

            if element.get_name() == "activePreset":
                # Probably this is not the best way to do it; but it works if not changning the preset.Band.name
                PRESET_NAMES = [re.sub(ALLOWED_CHARS_PATTERN, ' ', str(preset.Band.name)).strip() + "\x00" for preset in
                                _mem.Preset]

                _mem.Settings.activePreset = PRESET_NAMES.index(element.value)

            if element.get_name() == "batteryStyle":
                _mem.Settings.batteryStyle = BATTERY_STYLE_NAMES.index(element.value)

            if element.get_name() == "batteryType":
                _mem.Settings.batteryType = BATTERY_TYPE_NAMES.index(element.value)

            if element.get_name() == "batteryCalibration":
                _mem.Settings.batteryCalibration = int(element.value)

            if element.get_name() == "sqClosedTimeout":
                _mem.Settings.sqClosedTimeout = SCAN_TIMEOUT_NAMES.index(element.value)

            if element.get_name() == "sqOpenedTimeout":
                _mem.Settings.sqOpenedTimeout = SCAN_TIMEOUT_NAMES.index(element.value)

            if element.get_name() == "backlightOnSquelch":
                _mem.Settings.backlightOnSquelch = BL_SQL_MODE_NAMES.index(element.value)

            if element.get_name() == "noListen":
                _mem.Settings.noListen = element.value and 1 or 0

            if element.get_name() == "si4732PowerOff":
                _mem.Settings.si4732PowerOff = element.value and 1 or 0

            if element.get_name() == "bound_240_280":
                _mem.Settings.bound_240_280 = BOUND_240_280_NAMES.index(element.value)

            if element.get_name() == "scanTimeout":
                _mem.Settings.scanTimeout = int(element.value)

            if element.get_name() == "activeVFO":
                _mem.Settings.activeVFO = VFOs.index(element.value)

            if element.get_name() == "skipGarbageFrequencies":
                _mem.Settings.skipGarbageFrequencies = element.value and 1 or 0

            if element.get_name() == "sqlCloseTime":
                _mem.Settings.sqlCloseTime = SQL_CLOSE_NAMES.index(element.value)

            if element.get_name() == "sqlOpenTime":
                _mem.Settings.sqlOpenTime = SQL_OPEN_NAMES.index(element.value)

            # if element.get_name() == "nickName":
                # _mem.Settings.nickName = element.value

            # VFO
            reg_patt = "^vfo(([0-9]){1,2})_"
            if re.search(reg_patt, element.get_name()):
                vfo_idx = int(re.search(reg_patt, element.get_name()).group(1))
                base_vfo_name = f"vfo{vfo_idx}"

                if element.get_name() == f"{base_vfo_name}_tx_f":
                    _mem.VFO[vfo_idx].txF = int(element.value) / 10

                if element.get_name() == f"{base_vfo_name}_tx_codeType":
                    #  Needed some logic to update the settings list values
                    _mem.VFO[vfo_idx].code.tx.type = TX_CODE_TYPES.index(element.value)

                if element.get_name() == f"{base_vfo_name}_tx_code":
                    _mem.VFO[vfo_idx].code.tx.value = int(element.value)

                if element.get_name() == f"{base_vfo_name}_rx_f":
                    _mem.VFO[vfo_idx].rxF = int(element.value) / 10

                if element.get_name() == f"{base_vfo_name}_rx_codeType":
                    _mem.VFO[vfo_idx].code.rx.type = RX_CODE_TYPES.index(element.value)

                if element.get_name() == f"{base_vfo_name}_rx_code":
                    _mem.VFO[vfo_idx].code.rx.value = int(element.value)
                    set_rx_code(_mem, _mem.VFO[vfo_idx], vfo_idx, element)

                if element.get_name() == f"{base_vfo_name}_channel":
                    _mem.VFO[vfo_idx].channel = int(element.value) - 1

                if element.get_name() == f"{base_vfo_name}_modulation":
                    _mem.VFO[vfo_idx].modulation = MODULATION_LIST_MAP.index(element.value)

                if element.get_name() == f"{base_vfo_name}_power":
                    _mem.VFO[vfo_idx].power = TX_POWER_NAMES.index(element.value)

                if element.get_name() == f"{base_vfo_name}_radio":
                    _mem.VFO[vfo_idx].radio = RADIO_LIST.index(element.value)

            # Preset
            reg_patt = "^preset(([0-9]){1,2})_"
            if re.search(reg_patt, element.get_name()):
                pr_idx = int(re.search(reg_patt, element.get_name()).group(1))
                base_pr_name = f"preset{pr_idx}"

                if element.get_name() == f"{base_pr_name}_PowerCalibration_s":
                    _mem.Preset[pr_idx].PowerCalibration.s = int(element.value)

                if element.get_name() == f"{base_pr_name}_PowerCalibration_m":
                    _mem.Preset[pr_idx].PowerCalibration.m = int(element.value)

                if element.get_name() == f"{base_pr_name}_PowerCalibration_e":
                    _mem.Preset[pr_idx].PowerCalibration.e = int(element.value)

                if element.get_name() == f"{base_pr_name}_band_start":
                    _mem.Preset[pr_idx].Band.FRange.start = int(element.value) / 10

                if element.get_name() == f"{base_pr_name}_band_end":
                    end = int(int(element.value) / 10)
                    _mem.Preset[pr_idx].Band.FRange.end_msb = (end >> 5) & 0x3FFFFF
                    _mem.Preset[pr_idx].Band.FRange.end_lsb = end & 0x1FF

                    # LOG.debug(
                    #     f"end: {end}, _mem.Preset[pr_idx].Band.FRange.end_msb: {_mem.Preset[pr_idx].Band.FRange.end_msb}, _mem.Preset[pr_idx].Band.FRange.end_lsb: {_mem.Preset[pr_idx].Band.FRange.end_lsb}")

                if element.get_name() == f"{base_pr_name}_band_name":
                    _mem.Preset[pr_idx].Band.name = sanitize_str_10(element.value)

                if element.get_name() == f"{base_pr_name}_band_modulation":
                    _mem.Preset[pr_idx].Band.modulation = MODULATION_LIST_MAP.index(element.value)

                if element.get_name() == f"{base_pr_name}_band_step":
                    _mem.Preset[pr_idx].Band.step = STEP_NAMES.index(element.value)

                if element.get_name() == f"{base_pr_name}_band_bw":
                    _mem.Preset[pr_idx].Band.bw = BANDWIDTH_LIST.index(element.value)

                if element.get_name() == f"{base_pr_name}_band_squelch_type":
                    _mem.Preset[pr_idx].Band.squelchType = SQUELCH_TYPE_LIST.index(element.value)

                if element.get_name() == f"{base_pr_name}_band_squelch":
                    _mem.Preset[pr_idx].Band.squelch = int(element.value)

                if element.get_name() == f"{base_pr_name}_band_gainIndex":
                    _mem.Preset[pr_idx].Band.gainIndex = int(element.value)

                if element.get_name() == f"{base_pr_name}_scanlists":
                    _mem.Preset[pr_idx].scanlists = int(element.value)

                if element.get_name() == f"{base_pr_name}_radio":
                    _mem.Preset[pr_idx].radio = RADIO_LIST.index(element.value)

                if element.get_name() == f"{base_pr_name}_offsetDir":
                    _mem.Preset[pr_idx].offsetDir = OFFSET_DIRECTION.index(element.value)

                if element.get_name() == f"{base_pr_name}_allowTx":
                    _mem.Preset[pr_idx].allowTx = element.value and 1 or 0

                if element.get_name() == f"{base_pr_name}_power":
                    _mem.Preset[pr_idx].power = TXPOWER_LIST.index(element.value)

            if element.get_name() == f"ssb_patch":
                if (element.value == "SSB V1"):
                    copy_patch(SSB_V1_PATCH_DATA_VALUE, _mem)
                elif (element.value == "None"):
                    copy_patch(EMPTY_PATCH_VALUE, _mem)
                else: 
                    copy_patch(OLD_PATCH_VALUE, _mem)
